    def setup_archive_tab(self):
        """إعداد تبويب أرشيف الدورات"""
        archive_frame = tk.Frame(self.archive_tab, bg=self.colors["light"], padx=10, pady=10)
        archive_frame.pack(fill=tk.BOTH, expand=True)

        # عنوان التبويب
        tk.Label(
            archive_frame,
            text="أرشيف الدورات التدريبية",
            font=self.fonts["title"],
            bg=self.colors["primary"],
            fg="white",
            padx=10, pady=10
        ).pack(fill=tk.X)
        # إطار أزرار الأرشفة
        button_frame = tk.Frame(archive_frame, bg=self.colors["light"], pady=20)
        button_frame.pack(fill=tk.X)

        # قسم تصدير الدورات إلى الأرشيف
        export_labelframe = tk.LabelFrame(
            archive_frame,
            text="تصدير الدورات إلى الأرشيف",
            font=self.fonts["subtitle"],
            bg=self.colors["light"],
            fg=self.colors["dark"],
            padx=15,
            pady=15
        )
        export_labelframe.pack(fill=tk.X, pady=10)

        tk.Label(
            export_labelframe,
            text="اختر الدورة التي تريد تصديرها إلى أرشيف خارجي:",
            font=self.fonts["text_bold"],
            bg=self.colors["light"]
        ).pack(anchor=tk.W, pady=(0, 10))

        # إطار لعرض الدورات المتاحة
        courses_frame = tk.Frame(export_labelframe, bg=self.colors["light"])
        courses_frame.pack(fill=tk.X, pady=5)

        # الحصول على جميع الدورات الحالية
        cursor = self.conn.cursor()
        cursor.execute("SELECT DISTINCT course FROM trainees")
        all_courses = [row[0] for row in cursor.fetchall() if row[0]]

        # إطار القائمة
        list_frame = tk.Frame(export_labelframe, bg=self.colors["light"])
        list_frame.pack(fill=tk.X, pady=5)

        # شريط تمرير للقائمة
        list_scroll = tk.Scrollbar(list_frame)
        list_scroll.pack(side=tk.RIGHT, fill=tk.Y)

        # قائمة الدورات مع إمكانية اختيار متعدد
        self.archive_courses_listbox = tk.Listbox(
            list_frame,
            font=self.fonts["text"],
            selectbackground=self.colors["primary"],
            selectforeground="white",
            selectmode=tk.MULTIPLE,
            height=6,
            yscrollcommand=list_scroll.set
        )
        self.archive_courses_listbox.pack(fill=tk.X)
        list_scroll.config(command=self.archive_courses_listbox.yview)

        # إضافة الدورات إلى القائمة
        for course in all_courses:
            self.archive_courses_listbox.insert(tk.END, course)

        # أزرار التصدير
        buttons_frame = tk.Frame(export_labelframe, bg=self.colors["light"], pady=10)
        buttons_frame.pack(fill=tk.X)

        # دالة تصدير الدورات المحددة
        def export_selected_courses():
            selected_indices = self.archive_courses_listbox.curselection()
            if not selected_indices:
                messagebox.showinfo("تنبيه", "الرجاء اختيار دورة واحدة على الأقل للتصدير")
                return

            selected_courses = [self.archive_courses_listbox.get(idx) for idx in selected_indices]

            # تأكيد التصدير
            confirm_msg = f"هل أنت متأكد من تصدير الدورات التالية إلى الأرشيف؟\n\n"
            for course in selected_courses:
                confirm_msg += f"- {course}\n"

            if not messagebox.askyesno("تأكيد التصدير", confirm_msg):
                return

            # تصدير الدورات المحددة
            success = self.archive_manager.export_courses_to_archive(selected_courses)

            if success:
                # سؤال المستخدم إذا كان يريد حذف الدورات من النظام
                if messagebox.askyesno(
                        "حذف الدورات",
                        "تم تصدير الدورات بنجاح إلى الأرشيف. هل تريد حذف هذه الدورات من النظام الآن؟"
                ):
                    self.delete_courses_after_archive(selected_courses)

                # تحديث قائمة الدورات
                self.update_archive_courses_list()

        # أزرار الأرشفة
        export_selected_btn = tk.Button(
            buttons_frame,
            text="تصدير الدورات المحددة",
            font=self.fonts["text_bold"],
            bg=self.colors["primary"],
            fg="white",
            padx=15, pady=5,
            bd=0, relief=tk.FLAT,
            cursor="hand2",
            command=export_selected_courses
        )
        export_selected_btn.pack(side=tk.LEFT, padx=5)

        refresh_btn = tk.Button(
            buttons_frame,
            text="تحديث القائمة",
            font=self.fonts["text_bold"],
            bg=self.colors["secondary"],
            fg="white",
            padx=15, pady=5,
            bd=0, relief=tk.FLAT,
            cursor="hand2",
            command=self.update_archive_courses_list
        )
        refresh_btn.pack(side=tk.LEFT, padx=5)

        # قسم استعراض الأرشيف
        view_labelframe = tk.LabelFrame(
            archive_frame,
            text="استعراض الأرشيف",
            font=self.fonts["subtitle"],
            bg=self.colors["light"],
            fg=self.colors["dark"],
            padx=15,
            pady=15
        )
        view_labelframe.pack(fill=tk.X, pady=10)

        tk.Label(
            view_labelframe,
            text="استعراض الدورات المؤرشفة سابقًا (قراءة فقط):",
            font=self.fonts["text_bold"],
            bg=self.colors["light"]
        ).pack(anchor=tk.W, pady=(0, 10))

        view_buttons_frame = tk.Frame(view_labelframe, bg=self.colors["light"])
        view_buttons_frame.pack(fill=tk.X, pady=5)

        open_archive_btn = tk.Button(
            view_buttons_frame,
            text="فتح ملف أرشيف دورات",
            font=self.fonts["text_bold"],
            bg="#FF5722",  # لون برتقالي للتمييز
            fg="white",
            padx=15, pady=8,
            bd=0, relief=tk.FLAT,
            cursor="hand2",
            command=self.archive_manager.open_archive_window
        )
        open_archive_btn.pack(side=tk.RIGHT, padx=5)

        # إضافة زر دمج ملفات الأرشيف
        merge_archives_btn = tk.Button(
            view_buttons_frame,
            text="دمج ملفات أرشيف",
            font=self.fonts["text_bold"],
            bg="#9C27B0",  # لون بنفسجي للتمييز
            fg="white",
            padx=15, pady=8,
            bd=0, relief=tk.FLAT,
            cursor="hand2",
            command=self.archive_manager.merge_archives
        )
        merge_archives_btn.pack(side=tk.RIGHT, padx=5)

    def update_archive_courses_list(self):
        """تحديث قائمة الدورات المتاحة للأرشفة"""
        self.archive_courses_listbox.delete(0, tk.END)

        cursor = self.conn.cursor()
        cursor.execute("SELECT DISTINCT course FROM trainees")
        all_courses = [row[0] for row in cursor.fetchall() if row[0]]

        for course in all_courses:
            self.archive_courses_listbox.insert(tk.END, course)

    def delete_courses_after_archive(self, course_names):
        """حذف الدورات بعد أرشفتها"""
        if not self.current_user["permissions"]["can_delete_students"]:
            messagebox.showwarning("تنبيه", "ليس لديك صلاحية حذف الدورات")
            return

        if not course_names:
            return

        # إنشاء نافذة تقدم العملية
        progress_window = tk.Toplevel(self.root)
        progress_window.title("حذف الدورات")
        progress_window.geometry("450x180")
        progress_window.configure(bg=self.colors["light"])
        progress_window.transient(self.root)
        progress_window.grab_set()

        # توسيط النافذة
        x = (progress_window.winfo_screenwidth() - 450) // 2
        y = (progress_window.winfo_screenheight() - 180) // 2
        progress_window.geometry(f"450x180+{x}+{y}")

        tk.Label(
            progress_window,
            text=f"جاري حذف {len(course_names)} دورة...",
            font=self.fonts["text_bold"],
            bg=self.colors["light"],
            pady=10
        ).pack()

        progress_var = tk.DoubleVar()
        progress_bar = ttk.Progressbar(
            progress_window,
            variable=progress_var,
            maximum=100,
            length=400
        )
        progress_bar.pack(pady=10)

        status_label = tk.Label(
            progress_window,
            text="جاري تحضير العملية...",
            font=self.fonts["text"],
            bg=self.colors["light"]
        )
        status_label.pack(pady=5)

        progress_window.update()

        try:
            cursor = self.conn.cursor()

            # الحذف لكل دورة
            for i, course_name in enumerate(course_names):
                # تحديث شريط التقدم
                progress_var.set((i / len(course_names)) * 80)
                status_label.config(text=f"جاري حذف دورة: {course_name}")
                progress_window.update()

                # الحصول على أرقام هويات المتدربين في الدورة
                cursor.execute("SELECT national_id FROM trainees WHERE course=?", (course_name,))
                student_ids = [row[0] for row in cursor.fetchall()]

                with self.conn:
                    # حذف سجلات الحضور للمتدربين
                    for student_id in student_ids:
                        self.conn.execute("DELETE FROM attendance WHERE national_id=?", (student_id,))

                    # حذف توزيع المتدربين على الفصول
                    self.conn.execute("DELETE FROM student_sections WHERE course_name=?", (course_name,))

                    # حذف الفصول
                    self.conn.execute("DELETE FROM course_sections WHERE course_name=?", (course_name,))

                    # حذف المتدربين
                    self.conn.execute("DELETE FROM trainees WHERE course=?", (course_name,))

            progress_var.set(100)
            status_label.config(text="تم حذف الدورات بنجاح!")
            progress_window.update()

            # إغلاق نافذة التقدم بعد ثانيتين
            progress_window.after(2000, progress_window.destroy)

            # تحديث البيانات
            self.update_students_tree()
            self.update_statistics()
            self.update_attendance_display()

            messagebox.showinfo("نجاح", f"تم حذف {len(course_names)} دورة بنجاح")

        except Exception as e:
            messagebox.showerror("خطأ", f"حدث خطأ أثناء حذف الدورات: {str(e)}")
            progress_window.destroy()

    def on_student_double_click(self, event):
        selected_item = self.students_tree.selection()
        if not selected_item:
            return
        self.view_student_profile()

    def search_student(self):
        """البحث عن متدرب مع اعتبار فلتر نوع القائمة الجديدة"""
        text = self.search_entry.get().strip()
        filter_type = self.course_type_var.get()

        # تعديل: شرط البحث حسب الخيار المحدد
        if filter_type == "المتدربين النشطين":
            where_clause = "WHERE (national_id LIKE ? OR name LIKE ?) AND is_excluded=0"
        elif filter_type == "المتدربين المستبعدين":
            where_clause = "WHERE (national_id LIKE ? OR name LIKE ?) AND is_excluded=1"
        else:  # "جميع المتدربين"
            where_clause = "WHERE (national_id LIKE ? OR name LIKE ?)"

        query = f"""
        SELECT t.*, 
            (SELECT section_name FROM student_sections 
             WHERE national_id = t.national_id AND course_name = t.course) as section_name
        FROM trainees t
        {where_clause}
        """

        df = pd.read_sql(query, self.conn, params=[f"%{text}%", f"%{text}%"])
        self.populate_students_tree(df)

    def update_students_tree(self):
        """تحديث شجرة المتدربين مع تصفح محدود"""
        # تحديد حجم الصفحة إذا لم يكن محدد مسبقًا
        if not hasattr(self, 'students_page_size'):
            self.students_page_size = 100

        if not hasattr(self, 'students_current_page'):
            self.students_current_page = 1

        filter_type = self.course_type_var.get()

        # مسح البيانات الحالية
        for item in self.students_tree.get_children():
            self.students_tree.delete(item)

        # بناء استعلام متطور مع التصفح المحدود
        where_condition = ""
        if filter_type == "المتدربين النشطين":
            where_condition = "WHERE t.is_excluded=0"
        elif filter_type == "المتدربين المستبعدين":
            where_condition = "WHERE t.is_excluded=1"

        # استعلام العدد الإجمالي
        count_query = f"""
            SELECT COUNT(*) 
            FROM trainees t 
            {where_condition}
        """

        cursor = self.conn.cursor()
        cursor.execute(count_query)
        total_students = cursor.fetchone()[0]

        # حساب عدد الصفحات
        total_pages = max(1, (total_students + self.students_page_size - 1) // self.students_page_size)

        # الاستعلام الرئيسي مع الانضمام إلى جدول الفصول
        query = f"""
            SELECT 
                t.national_id, 
                t.name, 
                t.rank, 
                t.course, 
                t.phone, 
                t.is_excluded,
                (SELECT section_name FROM student_sections 
                 WHERE national_id = t.national_id AND course_name = t.course) as section_name
            FROM trainees t
            {where_condition}
            ORDER BY t.name
            LIMIT {self.students_page_size} OFFSET {(self.students_current_page - 1) * self.students_page_size}
        """

        cursor.execute(query)
        students_data = cursor.fetchall()

        # إضافة البيانات إلى الجدول
        for student in students_data:
            national_id, name, rank, course, phone, is_excluded, section_name = student

            # تحديد حالة المتدرب (عادي أو مستبعد)
            status = "مستبعد" if is_excluded == 1 else "موجود"

            # تحضير عرض اسم الدورة مع الفصل إذا كان متوفراً
            course_display = course
            if section_name:
                course_display = f"{course_display} - فصل: {section_name}"

            values = (national_id, name, rank, course_display, phone, status)
            item_id = self.students_tree.insert("", tk.END, values=values)

            # تمييز المتدربين المستبعدين
            if is_excluded == 1:
                self.students_tree.item(item_id, tags=("excluded",))

        # إضافة أزرار التنقل بين صفحات المتدربين
        self.create_students_pagination_controls(total_pages)

    def create_students_pagination_controls(self, total_pages):
        """إنشاء أزرار التنقل بين صفحات المتدربين"""
        # إزالة أزرار التنقل الحالية إن وجدت
        if hasattr(self, 'students_pagination_frame'):
            self.students_pagination_frame.destroy()

        # لا داعي لعرض أزرار التنقل إذا كانت هناك صفحة واحدة فقط
        if total_pages <= 1:
            return

        # إنشاء إطار لأزرار التنقل
        self.students_pagination_frame = tk.Frame(self.students_tab, bg=self.colors["light"])
        self.students_pagination_frame.pack(fill=tk.X, padx=10, pady=5)

        # إضافة زر الصفحة السابقة
        prev_btn = tk.Button(
            self.students_pagination_frame,
            text="السابق",
            font=self.fonts["text_bold"],
            bg=self.colors["secondary"],
            fg="white",
            padx=10, pady=2,
            bd=0, relief=tk.FLAT,
            cursor="hand2",
            command=lambda: self.change_students_page(-1, total_pages)
        )
        prev_btn.pack(side=tk.RIGHT, padx=5)

        # إضافة لابل لعرض رقم الصفحة الحالية
        self.students_page_label = tk.Label(
            self.students_pagination_frame,
            text=f"الصفحة {self.students_current_page} من {total_pages}",
            font=self.fonts["text_bold"],
            bg=self.colors["light"]
        )
        self.students_page_label.pack(side=tk.RIGHT, padx=10)

        # إضافة زر الصفحة التالية
        next_btn = tk.Button(
            self.students_pagination_frame,
            text="التالي",
            font=self.fonts["text_bold"],
            bg=self.colors["secondary"],
            fg="white",
            padx=10, pady=2,
            bd=0, relief=tk.FLAT,
            cursor="hand2",
            command=lambda: self.change_students_page(1, total_pages)
        )
        next_btn.pack(side=tk.RIGHT, padx=5)

    def change_students_page(self, delta, total_pages):
        """تغيير صفحة جدول المتدربين الحالية والتحديث"""
        new_page = self.students_current_page + delta

        # التأكد من أن الصفحة الجديدة ضمن النطاق المسموح
        if 1 <= new_page <= total_pages:
            self.students_current_page = new_page
            self.update_students_tree()

    def populate_students_tree(self, df):
        """تعبئة شجرة المتدربين مع إضافة معلومات الفصل للمتدربين في الدورات متعددة الفصول"""
        for item in self.students_tree.get_children():
            self.students_tree.delete(item)

        for _, row in df.iterrows():
            # تحديد حالة المتدرب (عادي أو مستبعد)
            status = "مستبعد" if row['is_excluded'] == 1 else "موجود"

            # تحضير عرض اسم الدورة مع الفصل إذا كان متوفراً
            course_display = row['course']
            if pd.notna(row.get('section_name')):
                course_display = f"{course_display} - فصل: {row['section_name']}"

            values = (row['national_id'], row['name'], row['rank'], course_display, row['phone'], status)
            item_id = self.students_tree.insert("", tk.END, values=values)

            # تمييز المتدربين المستبعدين
            if row['is_excluded'] == 1:
                self.students_tree.item(item_id, tags=("excluded",))

    def add_new_student(self):
        if not self.current_user["permissions"]["can_add_students"]:
            messagebox.showwarning("تنبيه", "ليس لديك صلاحية إضافة متدربين جدد")
            return

        add_window = tk.Toplevel(self.root)
        add_window.title("إضافة متدرب جديد")
        add_window.geometry("400x350")
        add_window.configure(bg=self.colors["light"])
        add_window.transient(self.root)
        add_window.grab_set()

        x = (add_window.winfo_screenwidth() - 400) // 2
        y = (add_window.winfo_screenheight() - 350) // 2
        add_window.geometry(f"400x350+{x}+{y}")

        tk.Label(
            add_window,
            text="إضافة متدرب جديد",
            font=self.fonts["title"],
            bg=self.colors["primary"],
            fg="white",
            padx=10, pady=10, width=400
        ).pack(fill=tk.X)

        form_frame = tk.Frame(add_window, bg=self.colors["light"], padx=20, pady=20)
        form_frame.pack(fill=tk.BOTH)

        tk.Label(form_frame, text="رقم الهوية:", font=self.fonts["text_bold"], bg=self.colors["light"]).grid(row=0,
                                                                                                             column=1,
                                                                                                             padx=5,
                                                                                                             pady=5,
                                                                                                             sticky=tk.E)
        id_entry = tk.Entry(form_frame, font=self.fonts["text"], width=25)
        id_entry.grid(row=0, column=0, padx=5, pady=5, sticky=tk.W)

        tk.Label(form_frame, text="الاسم:", font=self.fonts["text_bold"], bg=self.colors["light"]).grid(row=1, column=1,
                                                                                                        padx=5, pady=5,
                                                                                                        sticky=tk.E)
        name_entry = tk.Entry(form_frame, font=self.fonts["text"], width=25)
        name_entry.grid(row=1, column=0, padx=5, pady=5, sticky=tk.W)

        tk.Label(form_frame, text="الرتبة:", font=self.fonts["text_bold"], bg=self.colors["light"]).grid(row=2,
                                                                                                         column=1,
                                                                                                         padx=5, pady=5,
                                                                                                         sticky=tk.E)
        rank_entry = tk.Entry(form_frame, font=self.fonts["text"], width=25)
        rank_entry.grid(row=2, column=0, padx=5, pady=5, sticky=tk.W)

        tk.Label(form_frame, text="اسم الدورة:", font=self.fonts["text_bold"], bg=self.colors["light"]).grid(row=3,
                                                                                                             column=1,
                                                                                                             padx=5,
                                                                                                             pady=5,
                                                                                                             sticky=tk.E)

        # عرض قائمة الدورات الحالية
        cursor = self.conn.cursor()
        cursor.execute("SELECT DISTINCT course FROM trainees")
        courses = [row[0] for row in cursor.fetchall() if row[0]]

        if courses:
            course_entry = ttk.Combobox(form_frame, font=self.fonts["text"], width=23, values=courses)
        else:
            course_entry = tk.Entry(form_frame, font=self.fonts["text"], width=25)

        course_entry.grid(row=3, column=0, padx=5, pady=5, sticky=tk.W)

        tk.Label(form_frame, text="رقم الجوال:", font=self.fonts["text_bold"], bg=self.colors["light"]).grid(row=4,
                                                                                                             column=1,
                                                                                                             padx=5,
                                                                                                             pady=5,
                                                                                                             sticky=tk.E)
        phone_entry = tk.Entry(form_frame, font=self.fonts["text"], width=25)
        phone_entry.grid(row=4, column=0, padx=5, pady=5, sticky=tk.W)

        button_frame = tk.Frame(add_window, bg=self.colors["light"], pady=10)
        button_frame.pack(fill=tk.X)

        def save_student():
            nid = id_entry.get().strip()
            name = name_entry.get().strip()
            rank_ = rank_entry.get().strip()
            course = course_entry.get().strip()
            phone = phone_entry.get().strip()
            if not nid or not name:
                messagebox.showwarning("تنبيه", "يجب إدخال رقم الهوية والاسم على الأقل")
                return
            cursor = self.conn.cursor()
            cursor.execute("SELECT COUNT(*) FROM trainees WHERE national_id=?", (nid,))
            exists = cursor.fetchone()[0]

            # في حالة وجود المتدرب بالفعل، نسأل المستخدم إذا كان يريد الاستمرار
            if exists > 0:
                # تحقق ما إذا كان المتدرب موجود بنفس اسم الدورة
                cursor.execute("SELECT course FROM trainees WHERE national_id=?", (nid,))
                current_course = cursor.fetchone()[0]

                if current_course == course:
                    messagebox.showwarning("تنبيه", f"رقم الهوية موجود بالفعل في نفس الدورة: {course}")
                    return

                if not messagebox.askyesno("تأكيد الإضافة",
                                           f"المتدرب برقم الهوية {nid} موجود في دورة أخرى: {current_course}\n\nهل تريد حذفه من الدورة السابقة وإضافته للدورة الجديدة: {course}؟"):
                    return

                try:
                    # حذف المتدرب من الدورة القديمة
                    with self.conn:
                        # حذف سجلات الحضور للمتدرب
                        self.conn.execute("DELETE FROM attendance WHERE national_id=?", (nid,))
                        # حذف المتدرب نفسه
                        self.conn.execute("DELETE FROM trainees WHERE national_id=?", (nid,))
                except Exception as e:
                    messagebox.showerror("خطأ", f"حدث خطأ أثناء حذف السجل القديم: {str(e)}")
                    return

            try:
                with self.conn:
                    self.conn.execute("""
                        INSERT INTO trainees (national_id, name, rank, course, phone)
                        VALUES (?, ?, ?, ?, ?)
                    """, (nid, name, rank_, course, phone))
                messagebox.showinfo("نجاح", "تمت الإضافة بنجاح")
                add_window.destroy()
                self.update_students_tree()
                self.update_statistics()
            except Exception as e:
                messagebox.showerror("خطأ", str(e))

        save_btn = tk.Button(button_frame, text="حفظ", font=self.fonts["text_bold"], bg=self.colors["success"],
                             fg="white",
                             padx=15, pady=5, bd=0, relief=tk.FLAT, cursor="hand2", command=save_student)
        save_btn.pack(side=tk.LEFT, padx=10)

        cancel_btn = tk.Button(button_frame, text="إلغاء", font=self.fonts["text_bold"], bg=self.colors["danger"],
                               fg="white",
                               padx=15, pady=5, bd=0, relief=tk.FLAT, cursor="hand2", command=add_window.destroy)
        cancel_btn.pack(side=tk.RIGHT, padx=10)

    def edit_student(self, from_selection=False):
        if not self.current_user["permissions"]["can_edit_students"]:
            messagebox.showwarning("تنبيه", "ليس لديك صلاحية تعديل بيانات المتدربين")
            return

        if from_selection:
            selected_item = self.students_tree.selection()
            if not selected_item:
                messagebox.showinfo("تنبيه", "الرجاء تحديد متدرب من القائمة")
                return
            values = self.students_tree.item(selected_item, "values")
            nid = values[0]
        else:
            nid = simpledialog.askstring("تعديل متدرب", "أدخل رقم هوية المتدرب:")
            if not nid:
                return

        cursor = self.conn.cursor()

        # أولاً: استرجاع معلومات المتدرب
        cursor.execute("SELECT * FROM trainees WHERE national_id=?", (nid,))
        student = cursor.fetchone()

        if not student:
            messagebox.showinfo("تنبيه", "لا توجد معلومات عن هذا المتدرب")
            return

        # ثانياً: استرجاع سجلات الحضور بشكل منفصل ومباشر
        cursor.execute("""
                SELECT id, national_id, name, rank, course, time, date, status, original_status, 
                       registered_by, excuse_reason, updated_by, updated_at, modification_reason
                FROM attendance 
                WHERE national_id=?
                ORDER BY date DESC
            """, (nid,))
        attendance_records = cursor.fetchall()

        edit_window = tk.Toplevel(self.root)
        edit_window.title("تعديل بيانات المتدرب")
        edit_window.geometry("400x350")
        edit_window.configure(bg=self.colors["light"])
        edit_window.transient(self.root)
        edit_window.grab_set()

        x = (edit_window.winfo_screenwidth() - 400) // 2
        y = (edit_window.winfo_screenheight() - 350) // 2
        edit_window.geometry(f"400x350+{x}+{y}")

        tk.Label(
            edit_window,
            text="تعديل بيانات المتدرب",
            font=self.fonts["title"],
            bg=self.colors["primary"],
            fg="white",
            padx=10, pady=10, width=400
        ).pack(fill=tk.X)

        form_frame = tk.Frame(edit_window, bg=self.colors["light"], padx=20, pady=20)
        form_frame.pack(fill=tk.BOTH)

        tk.Label(form_frame, text="رقم الهوية:", font=self.fonts["text_bold"], bg=self.colors["light"]).grid(row=0,
                                                                                                             column=1,
                                                                                                             padx=5,
                                                                                                             pady=5,
                                                                                                             sticky=tk.E)
        id_entry = tk.Entry(form_frame, font=self.fonts["text"], width=25)
        id_entry.insert(0, student[0])
        id_entry.config(state="disabled")
        id_entry.grid(row=0, column=0, padx=5, pady=5, sticky=tk.W)

        tk.Label(form_frame, text="الاسم:", font=self.fonts["text_bold"], bg=self.colors["light"]).grid(row=1, column=1,
                                                                                                        padx=5, pady=5,
                                                                                                        sticky=tk.E)
        name_entry = tk.Entry(form_frame, font=self.fonts["text"], width=25)
        name_entry.insert(0, student[1])
        name_entry.grid(row=1, column=0, padx=5, pady=5, sticky=tk.W)

        tk.Label(form_frame, text="الرتبة:", font=self.fonts["text_bold"], bg=self.colors["light"]).grid(row=2,
                                                                                                         column=1,
                                                                                                         padx=5, pady=5,
                                                                                                         sticky=tk.E)
        rank_entry = tk.Entry(form_frame, font=self.fonts["text"], width=25)
        rank_entry.insert(0, student[2])
        rank_entry.grid(row=2, column=0, padx=5, pady=5, sticky=tk.W)

        tk.Label(form_frame, text="اسم الدورة:", font=self.fonts["text_bold"], bg=self.colors["light"]).grid(row=3,
                                                                                                             column=1,
                                                                                                             padx=5,
                                                                                                             pady=5,
                                                                                                             sticky=tk.E)

        # عرض قائمة الدورات الحالية
        cursor = self.conn.cursor()
        cursor.execute("SELECT DISTINCT course FROM trainees")
        courses = [row[0] for row in cursor.fetchall() if row[0]]

        if courses:
            course_entry = ttk.Combobox(form_frame, font=self.fonts["text"], width=23, values=courses)
            course_entry.set(student[3])
        else:
            course_entry = tk.Entry(form_frame, font=self.fonts["text"], width=25)
            course_entry.insert(0, student[3])

        course_entry.grid(row=3, column=0, padx=5, pady=5, sticky=tk.W)

        tk.Label(form_frame, text="رقم الجوال:", font=self.fonts["text_bold"], bg=self.colors["light"]).grid(row=4,
                                                                                                             column=1,
                                                                                                             padx=5,
                                                                                                             pady=5,
                                                                                                             sticky=tk.E)
        phone_entry = tk.Entry(form_frame, font=self.fonts["text"], width=25)
        phone_entry.insert(0, student[4])
        phone_entry.grid(row=4, column=0, padx=5, pady=5, sticky=tk.W)

        button_frame = tk.Frame(edit_window, bg=self.colors["light"], pady=10)
        button_frame.pack(fill=tk.X)

        def save_edit():
            new_name = name_entry.get().strip()
            new_rank = rank_entry.get().strip()
            new_course = course_entry.get().strip()
            new_phone = phone_entry.get().strip()
            if not new_name:
                messagebox.showwarning("تنبيه", "لا يمكن ترك حقل الاسم فارغًا")
                return
            try:
                with self.conn:
                    # 1. تحديث بيانات المتدرب في جدول trainees
                    self.conn.execute("""
                        UPDATE trainees
                        SET name=?, rank=?, course=?, phone=?
                        WHERE national_id=?
                    """, (new_name, new_rank, new_course, new_phone, student[0]))

                    # 2. تحديث اسم المتدرب والرتبة في جدول attendance
                    if new_name != student[1] or new_rank != student[2]:
                        self.conn.execute("""
                            UPDATE attendance
                            SET name=?, rank=?
                            WHERE national_id=?
                        """, (new_name, new_rank, student[0]))

                    # 3. إذا تم تغيير اسم الدورة، يجب تحديث سجلات الحضور أيضًا
                    if new_course != student[3]:
                        self.conn.execute("""
                            UPDATE attendance
                            SET course=?
                            WHERE national_id=?
                        """, (new_course, student[0]))

                        # تحديث بيانات الفصول إذا كان هناك تغيير في اسم الدورة
                        self.conn.execute("""
                            UPDATE student_sections
                            SET course_name=?
                            WHERE national_id=? AND course_name=?
                        """, (new_course, student[0], student[3]))

                messagebox.showinfo("نجاح", "تم التعديل بنجاح")
                edit_window.destroy()
                self.update_students_tree()
                self.update_attendance_display()  # تحديث عرض الحضور بعد التعديل
            except Exception as e:
                messagebox.showerror("خطأ", str(e))

        save_btn = tk.Button(button_frame, text="حفظ", font=self.fonts["text_bold"], bg=self.colors["success"],
                             fg="white",
                             padx=15, pady=5, bd=0, relief=tk.FLAT, cursor="hand2", command=save_edit)
        save_btn.pack(side=tk.LEFT, padx=10)

        cancel_btn = tk.Button(button_frame, text="إلغاء", font=self.fonts["text_bold"], bg=self.colors["danger"],
                               fg="white",
                               padx=15, pady=5, bd=0, relief=tk.FLAT, cursor="hand2", command=edit_window.destroy)
        cancel_btn.pack(side=tk.RIGHT, padx=10)

    def delete_selected_student(self):
        if not self.current_user["permissions"]["can_delete_students"]:
            messagebox.showwarning("تنبيه", "ليس لديك صلاحية حذف المتدربين")
            return

        selected_item = self.students_tree.selection()
        if not selected_item:
            messagebox.showinfo("تنبيه", "الرجاء تحديد متدرب من القائمة")
            return
        values = self.students_tree.item(selected_item, "values")
        nid = values[0]
        if not messagebox.askyesnocancel("تأكيد", f"هل تريد حذف المتدرب صاحب الهوية {nid}؟"):
            return
        try:
            with self.conn:
                self.conn.execute("DELETE FROM trainees WHERE national_id=?", (nid,))
            messagebox.showinfo("نجاح", "تم الحذف بنجاح")
            self.update_students_tree()
            self.update_statistics()
        except Exception as e:
            messagebox.showerror("خطأ", str(e))

    def export_course_data(self, course_name):
        """وظيفة تصدير بيانات الدورة مع معلومات تفصيلية عن الغياب والتأخير"""
        if not self.current_user["permissions"]["can_export_data"]:
            messagebox.showwarning("تنبيه", "ليس لديك صلاحية تصدير البيانات")
            return

        try:
            # الحصول على بيانات المتدربين في الدورة
            cursor = self.conn.cursor()

            # استعلام البيانات الأساسية للمتدربين
            cursor.execute("""
                SELECT national_id, name, rank, phone, is_excluded, exclusion_reason, excluded_date
                FROM trainees
                WHERE course=?
            """, (course_name,))
            students_data = cursor.fetchall()

            if not students_data:
                messagebox.showinfo("ملاحظة", f"لا يوجد متدربين مسجلين في الدورة '{course_name}'")
                return

            # إنشاء نافذة حالة لإظهار تقدم التصدير
            progress_window = tk.Toplevel(self.root)
            progress_window.title("جاري تصدير البيانات")
            progress_window.geometry("400x150")
            progress_window.configure(bg=self.colors["light"])
            progress_window.transient(self.root)
            progress_window.resizable(False, False)
            progress_window.grab_set()

            x = (progress_window.winfo_screenwidth() - 400) // 2
            y = (progress_window.winfo_screenheight() - 150) // 2
            progress_window.geometry(f"400x150+{x}+{y}")

            tk.Label(
                progress_window,
                text=f"جاري تصدير بيانات الدورة: {course_name}",
                font=self.fonts["text_bold"],
                bg=self.colors["light"],
                pady=10
            ).pack()

            progress_var = tk.DoubleVar()
            progress_bar = ttk.Progressbar(
                progress_window,
                variable=progress_var,
                maximum=100,
                length=350
            )
            progress_bar.pack(pady=10)

            status_label = tk.Label(
                progress_window,
                text="جاري تحضير البيانات...",
                font=self.fonts["text"],
                bg=self.colors["light"]
            )
            status_label.pack(pady=5)

            progress_window.update()

            # إنشاء قاموس لتخزين بيانات كل متدرب
            students_dict = {}

            total_students = len(students_data)

            for index, student in enumerate(students_data):
                national_id, name, rank, phone, is_excluded, exclusion_reason, excluded_date = student

                # تحديث شريط التقدم
                progress_var.set((index / total_students) * 50)  # نصف التقدم للاستعلامات
                status_label.config(text=f"تحليل بيانات المتدرب {index + 1} من {total_students}: {name}")
                progress_window.update()

                # إحصاء حالات الغياب والتأخير لكل متدرب
                cursor.execute("""
                    SELECT status, COUNT(*) 
                    FROM attendance 
                    WHERE national_id=? AND status IN ('غائب', 'متأخر', 'غائب بعذر')
                    GROUP BY status
                """, (national_id,))
                status_counts = dict(cursor.fetchall())

                # الحصول على تواريخ الغياب
                cursor.execute("""
                    SELECT date FROM attendance 
                    WHERE national_id=? AND status='غائب'
                    ORDER BY date
                """, (national_id,))
                absent_dates = [row[0] for row in cursor.fetchall()]
                absent_dates_str = " || ".join(absent_dates) if absent_dates else ""

                # الحصول على تواريخ التأخير
                cursor.execute("""
                    SELECT date FROM attendance 
                    WHERE national_id=? AND status='متأخر'
                    ORDER BY date
                """, (national_id,))
                late_dates = [row[0] for row in cursor.fetchall()]
                late_dates_str = " || ".join(late_dates) if late_dates else ""

                # الحصول على أسباب وتواريخ الغياب بعذر
                cursor.execute("""
                    SELECT date, excuse_reason 
                    FROM attendance 
                    WHERE national_id=? AND status='غائب بعذر'
                    ORDER BY date
                """, (national_id,))
                excused_data = cursor.fetchall()

                excused_dates = [row[0] for row in excused_data]
                excused_dates_str = " || ".join(excused_dates) if excused_dates else ""

                # تجميع أسباب الغياب بعذر
                excuses_text = ""
                for date, reason in excused_data:
                    if reason:
                        excuses_text += f"{date}: {reason} || "

                if excuses_text.endswith(" || "):
                    excuses_text = excuses_text[:-4]

                # تنسيق حالة الاستبعاد
                excluded_status = "مستبعد" if is_excluded else "موجود"
                exclusion_info = exclusion_reason if is_excluded else "لا يوجد"
                exclusion_date = excluded_date if is_excluded else ""

                # تخزين البيانات في القاموس
                students_dict[national_id] = {
                    "رقم الهوية": national_id,
                    "الاسم": name,
                    "الرتبة": rank,
                    "الدورة": course_name,
                    "رقم الجوال": phone,
                    "عدد أيام الغياب": status_counts.get("غائب", 0),
                    "تواريخ الغياب": absent_dates_str,
                    "عدد أيام التأخير": status_counts.get("متأخر", 0),
                    "تواريخ التأخير": late_dates_str,
                    "عدد أيام الغياب بعذر": status_counts.get("غائب بعذر", 0),
                    "أسباب الغياب بعذر": excuses_text,
                    "حالة المتدرب": excluded_status,
                    "سبب الاستبعاد": exclusion_info,
                    "تاريخ الاستبعاد": exclusion_date
                }

            # تحويل القاموس إلى DataFrame
            progress_var.set(60)
            status_label.config(text="إنشاء ملف التصدير...")
            progress_window.update()

            df = pd.DataFrame(list(students_dict.values()))

            # حفظ الإكسل
            progress_var.set(70)
            status_label.config(text="فتح حوار حفظ الملف...")
            progress_window.update()

            export_file = filedialog.asksaveasfilename(
                defaultextension=".xlsx",
                filetypes=[("Excel files", "*.xlsx")],
                initialfile=f"دورة_{course_name}.xlsx"
            )

            if not export_file:
                progress_window.destroy()
                return

            # تصدير إلى ملف إكسل مع معالجة خاصة للخلايا
            progress_var.set(80)
            status_label.config(text="إنشاء ملف Excel...")
            progress_window.update()

            writer = pd.ExcelWriter(export_file, engine='xlsxwriter')
            df.to_excel(writer, index=False, sheet_name='بيانات الدورة')

            # الحصول على workbook وورقة العمل
            workbook = writer.book
            worksheet = writer.sheets['بيانات الدورة']

            # تنسيق الخلايا
            header_format = workbook.add_format({
                'bold': True,
                'text_wrap': True,
                'valign': 'top',
                'fg_color': '#4F81BD',
                'font_color': 'white',
                'border': 1,
                'align': 'center'
            })

            # تنسيق للمحتوى
            content_format = workbook.add_format({
                'text_wrap': True,
                'valign': 'top',
                'align': 'right',
                'border': 1
            })

            # تطبيق التنسيق على الرؤوس
            progress_var.set(90)
            status_label.config(text="تنسيق الملف...")
            progress_window.update()

            for col_num, value in enumerate(df.columns.values):
                worksheet.write(0, col_num, value, header_format)

            # تعديل عرض الأعمدة وتطبيق التنسيق
            for i, col in enumerate(df.columns):
                # تعيين عرض مناسب لكل عمود
                column_width = max(
                    df[col].astype(str).map(len).max(),  # أطول نص في العمود
                    len(str(col)) + 2  # عرض عنوان العمود + هامش
                )
                # تحديد حد أقصى
                if column_width > 50:
                    column_width = 50
                worksheet.set_column(i, i, column_width, content_format)

            # إضافة تنسيق لجدول البيانات (تصميم الجدول)
            worksheet.add_table(0, 0, len(df), len(df.columns) - 1, {
                'style': 'Table Style Medium 2',
                'columns': [{'header': col} for col in df.columns]
            })

            # حفظ الملف
            progress_var.set(95)
            status_label.config(text="حفظ الملف...")
            progress_window.update()

            writer.close()

            progress_var.set(100)
            status_label.config(text="تم تصدير البيانات بنجاح!")
            progress_window.update()

            # إغلاق نافذة التقدم بعد ثانيتين
            progress_window.after(2000, progress_window.destroy)

            messagebox.showinfo("نجاح", f"تم تصدير بيانات الدورة '{course_name}' بنجاح إلى الملف:\n{export_file}")

        except Exception as e:
            try:
                progress_window.destroy()
            except:
                pass
            messagebox.showerror("خطأ", f"حدث خطأ أثناء تصدير بيانات الدورة: {str(e)}")

    def import_new_course(self):
        """
        دالة استيراد دورة جديدة من ملف Excel
        مع إضافة تاريخ بداية ونهاية الدورة وفئة الدورة
        """
        if not self.current_user["permissions"]["can_import_data"]:
            messagebox.showwarning("تنبيه", "ليس لديك صلاحية استيراد البيانات")
            return

        import_window = tk.Toplevel(self.root)
        import_window.title("استيراد دورة جديدة")
        import_window.geometry("500x750")  # زيادة ارتفاع النافذة
        import_window.configure(bg=self.colors["light"])
        import_window.transient(self.root)
        import_window.grab_set()

        x = (import_window.winfo_screenwidth() - 500) // 2
        y = (import_window.winfo_screenheight() - 750) // 2
        import_window.geometry(f"500x750+{x}+{y}")

        tk.Label(
            import_window,
            text="استيراد دورة جديدة",
            font=self.fonts["title"],
            bg=self.colors["primary"],
            fg="white",
            padx=10, pady=10
        ).pack(fill=tk.X)

        input_frame = tk.Frame(import_window, bg=self.colors["light"], padx=20, pady=20)
        input_frame.pack(fill=tk.BOTH, expand=True)

        tk.Label(
            input_frame,
            text="اسم الدورة الجديدة:",
            font=self.fonts["text_bold"],
            bg=self.colors["light"]
        ).pack(anchor=tk.W, pady=(0, 5))

        course_entry = tk.Entry(input_frame, font=self.fonts["text"], width=40)
        course_entry.pack(fill=tk.X, pady=(0, 20))

        # إضافة قائمة منسدلة لفئة الدورة
        category_frame = tk.Frame(input_frame, bg=self.colors["light"])
        category_frame.pack(fill=tk.X, pady=10)

        tk.Label(
            category_frame,
            text="فئة الدورة:",
            font=self.fonts["text_bold"],
            bg=self.colors["light"]
        ).pack(side=tk.RIGHT, padx=5)

        course_categories = ["ضباط", "أفراد", "مشتركة", "مدنيين"]
        category_var = tk.StringVar(value="مشتركة")
        category_combo = ttk.Combobox(
            category_frame,
            textvariable=category_var,
            values=course_categories,
            state="readonly",
            width=20,
            font=self.fonts["text"]
        )
        category_combo.pack(side=tk.RIGHT, padx=5)

        # إضافة إطار لتاريخ نهاية الدورة في النظام
        system_end_date_frame = tk.LabelFrame(
            input_frame,
            text="تاريخ نهاية الدورة في النظام",
            font=self.fonts["text_bold"],
            bg=self.colors["light"],
            padx=10,
            pady=10
        )
        system_end_date_frame.pack(fill=tk.X, pady=10)

        system_end_date_entry = DateEntry(
            system_end_date_frame,
            width=15,
            background=self.colors["primary"],
            foreground='white',
            borderwidth=2,
            date_pattern='yyyy-mm-dd',
            font=self.fonts["text"],
            firstweekday="sunday"
        )
        system_end_date_entry.pack(pady=5)

        # إطار لتاريخ بداية الدورة النصي (للعرض فقط)
        start_date_frame = tk.LabelFrame(input_frame, text="تاريخ بداية الدورة (للعرض)", font=self.fonts["text_bold"],
                                         bg=self.colors["light"], padx=10, pady=10)
        start_date_frame.pack(fill=tk.X, pady=10)

        # حقول تاريخ البداية
        start_date_fields = tk.Frame(start_date_frame, bg=self.colors["light"])
        start_date_fields.pack(fill=tk.X)

        # اليوم
        tk.Label(start_date_fields, text="اليوم:", font=self.fonts["text"], bg=self.colors["light"]).pack(side=tk.RIGHT,
                                                                                                          padx=5)
        start_day_entry = tk.Entry(start_date_fields, font=self.fonts["text"], width=5)
        start_day_entry.pack(side=tk.RIGHT, padx=5)

        # الشهر
        tk.Label(start_date_fields, text="الشهر:", font=self.fonts["text"], bg=self.colors["light"]).pack(side=tk.RIGHT,
                                                                                                          padx=5)
        start_month_entry = tk.Entry(start_date_fields, font=self.fonts["text"], width=5)
        start_month_entry.pack(side=tk.RIGHT, padx=5)

        # السنة
        tk.Label(start_date_fields, text="السنة:", font=self.fonts["text"], bg=self.colors["light"]).pack(side=tk.RIGHT,
                                                                                                          padx=5)
        start_year_entry = tk.Entry(start_date_fields, font=self.fonts["text"], width=8)
        start_year_entry.pack(side=tk.RIGHT, padx=5)

        # إطار لتاريخ نهاية الدورة النصي (للعرض فقط)
        end_date_frame = tk.LabelFrame(input_frame, text="تاريخ نهاية الدورة (للعرض)", font=self.fonts["text_bold"],
                                       bg=self.colors["light"], padx=10, pady=10)
        end_date_frame.pack(fill=tk.X, pady=10)

        # حقول تاريخ النهاية
        end_date_fields = tk.Frame(end_date_frame, bg=self.colors["light"])
        end_date_fields.pack(fill=tk.X)

        # اليوم
        tk.Label(end_date_fields, text="اليوم:", font=self.fonts["text"], bg=self.colors["light"]).pack(side=tk.RIGHT,
                                                                                                        padx=5)
        end_day_entry = tk.Entry(end_date_fields, font=self.fonts["text"], width=5)
        end_day_entry.pack(side=tk.RIGHT, padx=5)

        # الشهر
        tk.Label(end_date_fields, text="الشهر:", font=self.fonts["text"], bg=self.colors["light"]).pack(side=tk.RIGHT,
                                                                                                        padx=5)
        end_month_entry = tk.Entry(end_date_fields, font=self.fonts["text"], width=5)
        end_month_entry.pack(side=tk.RIGHT, padx=5)

        # السنة
        tk.Label(end_date_fields, text="السنة:", font=self.fonts["text"], bg=self.colors["light"]).pack(side=tk.RIGHT,
                                                                                                        padx=5)
        end_year_entry = tk.Entry(end_date_fields, font=self.fonts["text"], width=8)
        end_year_entry.pack(side=tk.RIGHT, padx=5)

        # القيود على حقول التاريخ
        def validate_number(P, max_length):
            if P == "":
                return True
            if not P.isdigit():
                return False
            if len(P) > max_length:
                return False
            return True

        # تسجيل وظائف التحقق
        validate_day = import_window.register(lambda P: validate_number(P, 2))
        validate_month = import_window.register(lambda P: validate_number(P, 2))
        validate_year = import_window.register(lambda P: validate_number(P, 4))

        # تطبيق القيود
        start_day_entry.config(validate="key", validatecommand=(validate_day, "%P"))
        start_month_entry.config(validate="key", validatecommand=(validate_month, "%P"))
        start_year_entry.config(validate="key", validatecommand=(validate_year, "%P"))

        end_day_entry.config(validate="key", validatecommand=(validate_day, "%P"))
        end_month_entry.config(validate="key", validatecommand=(validate_month, "%P"))
        end_year_entry.config(validate="key", validatecommand=(validate_year, "%P"))

        columns_frame = tk.Frame(input_frame, bg=self.colors["light"])
        columns_frame.pack(fill=tk.X, pady=5)

        tk.Label(
            input_frame,
            text="يجب أن يكون ترتيب أسماء الأعمدة كما يلي : (الاسم - الرتبة - رقم الهوية - رقم الجوال)",
            font=self.fonts["text"],
            bg=self.colors["light"],
            fg=self.colors["secondary"]
        ).pack(anchor=tk.W, pady=(0, 10))

        file_frame = tk.Frame(input_frame, bg=self.colors["light"])
        file_frame.pack(fill=tk.X)

        file_path_var = tk.StringVar()
        file_entry = tk.Entry(file_frame, textvariable=file_path_var, font=self.fonts["text"], width=30,
                              state="readonly")
        file_entry.pack(side=tk.LEFT, fill=tk.X, expand=True, padx=(0, 10))

        def browse_file():
            file_path = filedialog.askopenfilename(
                title="اختر ملف Excel",
                filetypes=[("Excel files", "*.xlsx"), ("All files", "*.*")]
            )
            if file_path:
                file_path_var.set(file_path)

        browse_btn = tk.Button(
            file_frame,
            text="استعراض...",
            font=self.fonts["text"],
            bg=self.colors["secondary"],
            fg="white",
            padx=10, pady=3,
            bd=0, relief=tk.FLAT,
            cursor="hand2",
            command=browse_file
        )
        browse_btn.pack(side=tk.RIGHT)

        def import_course():
            course_name = course_entry.get().strip()
            file_path = file_path_var.get().strip()
            category = category_var.get()
            system_end_date = system_end_date_entry.get_date().strftime("%Y-%m-%d")

            start_day = start_day_entry.get().strip()
            start_month = start_month_entry.get().strip()
            start_year = start_year_entry.get().strip()
            end_day = end_day_entry.get().strip()
            end_month = end_month_entry.get().strip()
            end_year = end_year_entry.get().strip()

            # التحقق من البيانات
            if not course_name:
                messagebox.showwarning("تنبيه", "الرجاء إدخال اسم الدورة")
                return

            if not file_path:
                messagebox.showwarning("تنبيه", "الرجاء اختيار ملف Excel")
                return

            # التحقق من تواريخ البداية والنهاية (اختياري)
            date_valid = True
            date_message = ""

            if (start_day or start_month or start_year) and not (start_day and start_month and start_year):
                date_valid = False
                date_message = "يجب إدخال تاريخ بداية الدورة كاملاً (اليوم والشهر والسنة)"

            if (end_day or end_month or end_year) and not (end_day and end_month and end_year):
                date_valid = False
                date_message = "يجب إدخال تاريخ نهاية الدورة كاملاً (اليوم والشهر والسنة)"

            if not date_valid:
                messagebox.showwarning("تنبيه", date_message)
                return

            # فحص المتدربين المتكررين واستكمال عملية الاستيراد
            self.check_duplicate_students_with_dates(file_path, course_name,
                                                     start_day, start_month, start_year,
                                                     end_day, end_month, end_year,
                                                     system_end_date, category)
            import_window.destroy()

        button_frame = tk.Frame(import_window, bg=self.colors["light"], pady=10)
        button_frame.pack(fill=tk.X, padx=20)

        import_btn = tk.Button(
            button_frame,
            text="استيراد",
            font=self.fonts["text_bold"],
            bg=self.colors["success"],
            fg="white",
            padx=15, pady=5,
            bd=0, relief=tk.FLAT,
            cursor="hand2",
            command=import_course
        )
        import_btn.pack(side=tk.LEFT, padx=5)

        cancel_btn = tk.Button(
            button_frame,
            text="إلغاء",
            font=self.fonts["text_bold"],
            bg=self.colors["danger"],
            fg="white",
            padx=15, pady=5,
            bd=0, relief=tk.FLAT,
            cursor="hand2",
            command=import_window.destroy
        )
        cancel_btn.pack(side=tk.RIGHT, padx=5)

    def save_course_dates_and_category(self, course_name, start_day, start_month, start_year,
                                       end_day, end_month, end_year, system_end_date, category):
        """
        حفظ تواريخ بداية ونهاية الدورة وفئتها في قاعدة البيانات
        """
        try:
            current_date = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")

            with self.conn:
                # التحقق من وجود الدورة
                cursor = self.conn.cursor()
                cursor.execute("SELECT COUNT(*) FROM course_info WHERE course_name=?", (course_name,))
                exists = cursor.fetchone()[0] > 0

                if exists:
                    # تحديث بيانات الدورة الموجودة
                    self.conn.execute("""
                        UPDATE course_info 
                        SET start_day=?, start_month=?, start_year=?, 
                            end_day=?, end_month=?, end_year=?,
                            end_date_system=?, course_category=?
                        WHERE course_name=?
                    """, (start_day, start_month, start_year, end_day, end_month, end_year,
                          system_end_date, category, course_name))
                else:
                    # إضافة دورة جديدة
                    self.conn.execute("""
                        INSERT INTO course_info 
                        (course_name, start_day, start_month, start_year, end_day, end_month, end_year, 
                         end_date_system, course_category, created_date)
                        VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
                    """, (course_name, start_day, start_month, start_year, end_day, end_month, end_year,
                          system_end_date, category, current_date))

            return True
        except Exception as e:
            print(f"خطأ في حفظ بيانات الدورة: {str(e)}")
            return False

    def check_duplicate_students_with_dates(self, file_path, course_name,
                                            start_day, start_month, start_year,
                                            end_day, end_month, end_year,
                                            system_end_date, category):
        """
        فحص المتدربين المتكررين قبل استيراد دورة جديدة مع دعم تواريخ البداية والنهاية وفئة الدورة
        """
        try:
            # إنشاء نافذة حالة لإظهار تقدم العملية
            progress_window = tk.Toplevel(self.root)
            progress_window.title("فحص المتدربين المتكررين")
            progress_window.geometry("400x150")
            progress_window.configure(bg=self.colors["light"])
            progress_window.transient(self.root)
            progress_window.grab_set()

            # توسيط النافذة
            x = (progress_window.winfo_screenwidth() - 400) // 2
            y = (progress_window.winfo_screenheight() - 150) // 2
            progress_window.geometry(f"400x150+{x}+{y}")

            tk.Label(
                progress_window,
                text="جاري فحص المتدربين المتكررين...",
                font=self.fonts["text_bold"],
                bg=self.colors["light"],
                pady=10
            ).pack()

            progress_var = tk.DoubleVar()
            progress_bar = ttk.Progressbar(
                progress_window,
                variable=progress_var,
                maximum=100,
                length=350
            )
            progress_bar.pack(pady=10)

            status_label = tk.Label(
                progress_window,
                text="جاري قراءة ملف Excel...",
                font=self.fonts["text"],
                bg=self.colors["light"]
            )
            status_label.pack(pady=5)

            progress_window.update()

            # قراءة ملف Excel
            df = pd.read_excel(file_path)

            # تحديد الأعمدة المطلوبة (دعم الأسماء العربية والإنجليزية)
            column_mapping = {
                'الاسم': 'name',
                'رقم الهوية': 'national_id',
                'الرتبة': 'rank',
                'رقم الجوال': 'phone',
                'name': 'name',
                'national_id': 'national_id',
                'rank': 'rank',
                'phone': 'phone'
            }

            # تغيير أسماء الأعمدة إلى النموذج الإنجليزي
            df_columns = list(df.columns)
            english_columns = {}

            for col in df_columns:
                if col in column_mapping:
                    english_columns[col] = column_mapping[col]

            # التحقق من وجود الأعمدة المطلوبة
            required_cols_ar = ["الاسم", "رقم الهوية", "الرتبة", "رقم الجوال"]
            required_cols_en = ["name", "national_id", "rank", "phone"]

            # التحقق من وجود العمود بأي من اللغتين
            has_name = any(col in ["الاسم", "name"] for col in df_columns)
            has_id = any(col in ["رقم الهوية", "national_id"] for col in df_columns)
            has_rank = any(col in ["الرتبة", "rank"] for col in df_columns)
            has_phone = any(col in ["رقم الجوال", "phone"] for col in df_columns)

            if not (has_name and has_id):
                progress_window.destroy()
                messagebox.showwarning("تحذير",
                                       "يجب أن يحتوي الملف على الأعمدة التالية على الأقل:\n"
                                       "- الاسم (name)\n"
                                       "- رقم الهوية (national_id)")
                return False

            # إعادة تسمية الأعمدة للاستخدام الداخلي
            rename_dict = {}
            for orig_col in df.columns:
                if orig_col in column_mapping:
                    rename_dict[orig_col] = column_mapping[orig_col]

            if rename_dict:
                df = df.rename(columns=rename_dict)

            # إضافة الأعمدة المفقودة (اختياري) إذا لم تكن موجودة
            if 'rank' not in df.columns:
                df['rank'] = ''
            if 'phone' not in df.columns:
                df['phone'] = ''

            # قائمة المتدربين المتكررين
            duplicates = []

            # فحص كل متدرب
            progress_var.set(20)
            status_label.config(text="جاري فحص المتدربين المتكررين...")
            progress_window.update()

            total_rows = len(df)
            cursor = self.conn.cursor()

            for i, row in enumerate(df.iterrows()):
                # تحديث شريط التقدم
                progress = 20 + (i / total_rows * 60)
                progress_var.set(progress)

                _, row_data = row
                # تحويل رقم الهوية إلى نص
                nid = str(row_data["national_id"]).strip()
                name = str(row_data["name"]).strip()

                if i % 10 == 0:
                    status_label.config(text=f"فحص المتدرب {i + 1} من {total_rows}: {name}")
                    progress_window.update()

                # التحقق من وجود المتدرب
                cursor.execute("""
                    SELECT t.course, t.name
                    FROM trainees t
                    WHERE t.national_id=?
                """, (nid,))

                result = cursor.fetchone()
                if result:
                    current_course, current_name = result
                    duplicates.append({
                        "id": nid,
                        "name": name,
                        "current_course": current_course
                    })

            progress_window.destroy()

            # حفظ تواريخ الدورة وفئتها بغض النظر عن وجود متدربين متكررين
            self.save_course_dates_and_category(course_name, start_day, start_month, start_year,
                                                end_day, end_month, end_year, system_end_date, category)

            # عرض النتائج
            if duplicates:
                # عرض رسالة بأسماء المتدربين المتكررين فقط
                duplicate_details = f"تم العثور على {len(duplicates)} متدرب موجودين بالفعل في دورات أخرى:\n\n"

                # عرض أول 10 متدربين فقط لتجنب رسائل طويلة جداً
                display_count = min(10, len(duplicates))
                for i in range(display_count):
                    duplicate_details += f"{i + 1}. {duplicates[i]['name']} (هوية: {duplicates[i]['id']}) - دورة: {duplicates[i]['current_course']}\n"

                if len(duplicates) > 10:
                    duplicate_details += f"\n... وغيرهم ({len(duplicates) - 10} آخرين)"

                duplicate_details += "\n\nهل تريد نقل هؤلاء المتدربين من دوراتهم السابقة إلى الدورة الجديدة؟"

                choice = messagebox.askquestion("متدربين متكررين", duplicate_details, type=messagebox.YESNOCANCEL)

                if choice == "cancel":
                    return False

                # متابعة الاستيراد مع خيار النقل (True) أو التخطي (False)
                update_mode = (choice == "yes")

                # إضافة سؤال عما إذا كانت الدورة متعددة الفصول
                is_multi_section = messagebox.askyesno("نوع الدورة", f"هل الدورة '{course_name}' متعددة الفصول؟")

                sections_count = 1
                if is_multi_section:
                    # طلب عدد الفصول
                    sections_count_str = simpledialog.askstring("عدد الفصول", "كم عدد الفصول في هذه الدورة؟",
                                                                initialvalue="2")
                    if not sections_count_str:
                        return False

                    try:
                        sections_count = int(sections_count_str)
                        if sections_count <= 0:
                            messagebox.showwarning("تنبيه", "يجب أن يكون عدد الفصول أكبر من صفر")
                            return False
                    except:
                        messagebox.showwarning("تنبيه", "الرجاء إدخال رقم صحيح لعدد الفصول")
                        return False
                else:
                    # إذا كانت الدورة غير متعددة الفصول، نجعلها بفصل واحد فقط
                    sections_count = 1
                    messagebox.showinfo("معلومات",
                                        f"سيتم إنشاء فصل واحد للدورة '{course_name}' ويمكنك إدارة الفصول لاحقًا من 'إدارة الفصول وتصدير الكشوفات'")

                # استدعاء دالة معالجة الاستيراد
                self.process_course_import_arabic(file_path, course_name, is_multi_section, sections_count, update_mode)
                return True
            else:
                messagebox.showinfo("تقرير الفحص",
                                    f"لم يتم العثور على متدربين متكررين. يمكنك المتابعة في استيراد الدورة '{course_name}'.")
                # إضافة سؤال عما إذا كانت الدورة متعددة الفصول
                is_multi_section = messagebox.askyesno("نوع الدورة", f"هل الدورة '{course_name}' متعددة الفصول؟")

                sections_count = 1
                if is_multi_section:
                    # طلب عدد الفصول
                    sections_count_str = simpledialog.askstring("عدد الفصول", "كم عدد الفصول في هذه الدورة؟",
                                                                initialvalue="2")
                    if not sections_count_str:
                        return False

                    try:
                        sections_count = int(sections_count_str)
                        if sections_count <= 0:
                            messagebox.showwarning("تنبيه", "يجب أن يكون عدد الفصول أكبر من صفر")
                            return False
                    except:
                        messagebox.showwarning("تنبيه", "الرجاء إدخال رقم صحيح لعدد الفصول")
                        return False
                else:
                    # إذا كانت الدورة غير متعددة الفصول، نجعلها بفصل واحد فقط
                    sections_count = 1
                    messagebox.showinfo("معلومات",
                                        f"سيتم إنشاء فصل واحد للدورة '{course_name}' ويمكنك إدارة الفصول لاحقًا من 'إدارة الفصول وتصدير الكشوفات'")

                # استدعاء دالة معالجة الاستيراد
                self.process_course_import_arabic(file_path, course_name, is_multi_section, sections_count, False)
                return False

        except Exception as e:
            try:
                progress_window.destroy()
            except:
                pass
            messagebox.showerror("خطأ", f"حدث خطأ أثناء فحص المتدربين المتكررين: {str(e)}")
            return False

    def save_course_dates(self, course_name, start_day, start_month, start_year, end_day, end_month, end_year):
        """
        حفظ تواريخ بداية ونهاية الدورة في قاعدة البيانات
        """
        try:
            current_date = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")

            with self.conn:
                # التحقق من وجود الدورة
                cursor = self.conn.cursor()
                cursor.execute("SELECT COUNT(*) FROM course_info WHERE course_name=?", (course_name,))
                exists = cursor.fetchone()[0] > 0

                if exists:
                    # تحديث بيانات الدورة الموجودة
                    self.conn.execute("""
                        UPDATE course_info 
                        SET start_day=?, start_month=?, start_year=?, 
                            end_day=?, end_month=?, end_year=?
                        WHERE course_name=?
                    """, (start_day, start_month, start_year, end_day, end_month, end_year, course_name))
                else:
                    # إضافة دورة جديدة
                    self.conn.execute("""
                        INSERT INTO course_info 
                        (course_name, start_day, start_month, start_year, end_day, end_month, end_year, created_date)
                        VALUES (?, ?, ?, ?, ?, ?, ?, ?)
                    """, (course_name, start_day, start_month, start_year, end_day, end_month, end_year, current_date))

            return True
        except Exception as e:
            print(f"خطأ في حفظ تواريخ الدورة: {str(e)}")
            return False

    def edit_course_dates(self, course_name):
        """تعديل اسم الدورة وتواريخ بداية ونهاية الدورة وفئتها"""

        # استرجاع البيانات الحالية من قاعدة البيانات
        cursor = self.conn.cursor()
        cursor.execute("""
            SELECT start_day, start_month, start_year, end_day, end_month, end_year, 
                   end_date_system, course_category
            FROM course_info
            WHERE course_name=?
        """, (course_name,))

        current_info = cursor.fetchone()
        current_dates = current_info[:6] if current_info else ["", "", "", "", "", ""]
        current_end_date_system = current_info[6] if current_info and len(current_info) > 6 else None
        current_category = current_info[7] if current_info and len(current_info) > 7 else "مشتركة"

        # إنشاء نافذة تعديل البيانات
        edit_window = tk.Toplevel(self.root)
        edit_window.title(f"تعديل بيانات دورة: {course_name}")
        edit_window.geometry("600x750")  # زيادة الارتفاع لاستيعاب حقل الفئة
        edit_window.configure(bg=self.colors["light"])
        edit_window.transient(self.root)
        edit_window.grab_set()

        # توسيط النافذة
        x = (edit_window.winfo_screenwidth() - 600) // 2
        y = (edit_window.winfo_screenheight() - 750) // 2
        edit_window.geometry(f"600x750+{x}+{y}")

        # عنوان النافذة
        tk.Label(
            edit_window,
            text="تعديل بيانات الدورة",
            font=self.fonts["title"],
            bg=self.colors["primary"],
            fg="white",
            padx=10, pady=10
        ).pack(fill=tk.X)

        # إطار المحتويات
        content_frame = tk.Frame(edit_window, bg=self.colors["light"], padx=20, pady=20)
        content_frame.pack(fill=tk.BOTH, expand=True)

        # حقل اسم الدورة
        name_frame = tk.LabelFrame(
            content_frame,
            text="اسم الدورة",
            font=self.fonts["text_bold"],
            bg=self.colors["light"],
            padx=10, pady=10
        )
        name_frame.pack(fill=tk.X, pady=10)

        new_course_name_var = tk.StringVar(value=course_name)
        course_name_entry = tk.Entry(
            name_frame,
            textvariable=new_course_name_var,
            font=self.fonts["text"],
            width=40
        )
        course_name_entry.pack(pady=5)

        # إطار فئة الدورة
        category_frame = tk.LabelFrame(
            content_frame,
            text="فئة الدورة",
            font=self.fonts["text_bold"],
            bg=self.colors["light"],
            padx=10, pady=10
        )
        category_frame.pack(fill=tk.X, pady=10)

        category_var = tk.StringVar(value=current_category)
        category_combo = ttk.Combobox(
            category_frame,
            textvariable=category_var,
            values=["ضباط", "أفراد", "مشتركة", "مدنيين"],
            state="readonly",
            width=20,
            font=self.fonts["text"]
        )
        category_combo.pack(pady=5)

        # إطار لتاريخ نهاية الدورة في النظام
        system_end_date_frame = tk.LabelFrame(
            content_frame,
            text="تاريخ نهاية الدورة في النظام",
            font=self.fonts["text_bold"],
            bg=self.colors["light"],
            padx=10, pady=10
        )
        system_end_date_frame.pack(fill=tk.X, pady=10)

        system_end_date_entry = DateEntry(
            system_end_date_frame,
            width=15,
            background=self.colors["primary"],
            foreground='white',
            borderwidth=2,
            date_pattern='yyyy-mm-dd',
            font=self.fonts["text"],
            firstweekday="sunday"
        )
        system_end_date_entry.pack(pady=5)

        # تعيين التاريخ الحالي إذا كان موجوداً
        if current_end_date_system:
            try:
                date_obj = datetime.datetime.strptime(current_end_date_system, "%Y-%m-%d")
                system_end_date_entry.set_date(date_obj)
            except:
                pass

        # إضافة إطار لتاريخ بداية الدورة
        start_date_frame = tk.LabelFrame(
            content_frame,
            text="تاريخ بداية الدورة (للعرض)",
            font=self.fonts["text_bold"],
            bg=self.colors["light"],
            padx=10, pady=10
        )
        start_date_frame.pack(fill=tk.X, pady=10)

        # حقول تاريخ البداية
        start_date_fields = tk.Frame(start_date_frame, bg=self.colors["light"])
        start_date_fields.pack(fill=tk.X)

        # اليوم
        tk.Label(start_date_fields, text="اليوم:", font=self.fonts["text"], bg=self.colors["light"]).pack(side=tk.RIGHT,
                                                                                                          padx=5)
        start_day_entry = tk.Entry(start_date_fields, font=self.fonts["text"], width=5)
        start_day_entry.insert(0, current_dates[0] if current_dates[0] else "")
        start_day_entry.pack(side=tk.RIGHT, padx=5)

        # الشهر
        tk.Label(start_date_fields, text="الشهر:", font=self.fonts["text"], bg=self.colors["light"]).pack(side=tk.RIGHT,
                                                                                                          padx=5)
        start_month_entry = tk.Entry(start_date_fields, font=self.fonts["text"], width=5)
        start_month_entry.insert(0, current_dates[1] if current_dates[1] else "")
        start_month_entry.pack(side=tk.RIGHT, padx=5)

        # السنة
        tk.Label(start_date_fields, text="السنة:", font=self.fonts["text"], bg=self.colors["light"]).pack(side=tk.RIGHT,
                                                                                                          padx=5)
        start_year_entry = tk.Entry(start_date_fields, font=self.fonts["text"], width=8)
        start_year_entry.insert(0, current_dates[2] if current_dates[2] else "")
        start_year_entry.pack(side=tk.RIGHT, padx=5)

        # إطار لتاريخ نهاية الدورة
        end_date_frame = tk.LabelFrame(
            content_frame,
            text="تاريخ نهاية الدورة (للعرض)",
            font=self.fonts["text_bold"],
            bg=self.colors["light"],
            padx=10, pady=10
        )
        end_date_frame.pack(fill=tk.X, pady=10)

        # حقول تاريخ النهاية
        end_date_fields = tk.Frame(end_date_frame, bg=self.colors["light"])
        end_date_fields.pack(fill=tk.X)

        # اليوم
        tk.Label(end_date_fields, text="اليوم:", font=self.fonts["text"], bg=self.colors["light"]).pack(side=tk.RIGHT,
                                                                                                        padx=5)
        end_day_entry = tk.Entry(end_date_fields, font=self.fonts["text"], width=5)
        end_day_entry.insert(0, current_dates[3] if current_dates[3] else "")
        end_day_entry.pack(side=tk.RIGHT, padx=5)

        # الشهر
        tk.Label(end_date_fields, text="الشهر:", font=self.fonts["text"], bg=self.colors["light"]).pack(side=tk.RIGHT,
                                                                                                        padx=5)
        end_month_entry = tk.Entry(end_date_fields, font=self.fonts["text"], width=5)
        end_month_entry.insert(0, current_dates[4] if current_dates[4] else "")
        end_month_entry.pack(side=tk.RIGHT, padx=5)

        # السنة
        tk.Label(end_date_fields, text="السنة:", font=self.fonts["text"], bg=self.colors["light"]).pack(side=tk.RIGHT,
                                                                                                        padx=5)
        end_year_entry = tk.Entry(end_date_fields, font=self.fonts["text"], width=8)
        end_year_entry.insert(0, current_dates[5] if current_dates[5] else "")
        end_year_entry.pack(side=tk.RIGHT, padx=5)

        # أزرار الحفظ والإلغاء
        buttons_frame = tk.Frame(edit_window, bg=self.colors["light"], pady=20)
        buttons_frame.pack(fill=tk.X, padx=10)

        def save_changes():
            """حفظ التغييرات"""
            new_name = new_course_name_var.get().strip()
            new_category = category_var.get()
            start_day = start_day_entry.get().strip()
            start_month = start_month_entry.get().strip()
            start_year = start_year_entry.get().strip()
            end_day = end_day_entry.get().strip()
            end_month = end_month_entry.get().strip()
            end_year = end_year_entry.get().strip()
            system_end_date = system_end_date_entry.get_date().strftime("%Y-%m-%d")

            # التحقق من صحة البيانات
            if not new_name:
                messagebox.showwarning("تنبيه", "اسم الدورة لا يمكن أن يكون فارغاً")
                return

            if (start_day or start_month or start_year) and not (start_day and start_month and start_year):
                messagebox.showwarning("تنبيه", "يجب إدخال تاريخ بداية الدورة كاملاً (اليوم والشهر والسنة)")
                return

            if (end_day or end_month or end_year) and not (end_day and end_month and end_year):
                messagebox.showwarning("تنبيه", "يجب إدخال تاريخ نهاية الدورة كاملاً (اليوم والشهر والسنة)")
                return

            try:
                with self.conn:
                    # إذا تم تغيير اسم الدورة
                    if new_name != course_name:
                        # التحقق من عدم وجود دورة بنفس الاسم الجديد
                        cursor.execute("SELECT COUNT(*) FROM course_info WHERE course_name=?", (new_name,))
                        if cursor.fetchone()[0] > 0:
                            messagebox.showwarning("تنبيه", f"يوجد دورة أخرى بنفس الاسم '{new_name}'")
                            return

                        # تحديث اسم الدورة في جميع الجداول المرتبطة
                        # 1. جدول المتدربين
                        self.conn.execute("UPDATE trainees SET course=? WHERE course=?", (new_name, course_name))

                        # 2. جدول الحضور
                        self.conn.execute("UPDATE attendance SET course=? WHERE course=?", (new_name, course_name))

                        # 3. جدول الفصول
                        self.conn.execute("UPDATE course_sections SET course_name=? WHERE course_name=?",
                                          (new_name, course_name))

                        # 4. جدول توزيع المتدربين على الفصول
                        self.conn.execute("UPDATE student_sections SET course_name=? WHERE course_name=?",
                                          (new_name, course_name))

                        # 5. جدول معلومات الدورة
                        self.conn.execute("""
                            UPDATE course_info 
                            SET course_name=?, start_day=?, start_month=?, start_year=?, 
                                end_day=?, end_month=?, end_year=?, end_date_system=?,
                                course_category=?
                            WHERE course_name=?
                        """, (new_name, start_day, start_month, start_year, end_day, end_month, end_year,
                              system_end_date, new_category, course_name))
                    else:
                        # تحديث البيانات فقط
                        self.conn.execute("""
                            UPDATE course_info 
                            SET start_day=?, start_month=?, start_year=?, 
                                end_day=?, end_month=?, end_year=?, end_date_system=?,
                                course_category=?
                            WHERE course_name=?
                        """, (start_day, start_month, start_year, end_day, end_month, end_year,
                              system_end_date, new_category, course_name))

                messagebox.showinfo("نجاح", "تم حفظ التغييرات بنجاح")
                edit_window.destroy()

                # تحديث البيانات المعروضة
                self.update_statistics()
                self.update_students_tree()
                self.update_attendance_display()

            except Exception as e:
                messagebox.showerror("خطأ", f"حدث خطأ أثناء حفظ التغييرات: {str(e)}")

        save_btn = tk.Button(
            buttons_frame,
            text="حفظ التغييرات",
            font=self.fonts["text_bold"],
            bg=self.colors["success"],
            fg="white",
            padx=15, pady=5,
            bd=0, relief=tk.FLAT,
            cursor="hand2",
            command=save_changes
        )
        save_btn.pack(side=tk.LEFT, padx=10)

        cancel_btn = tk.Button(
            buttons_frame,
            text="إلغاء",
            font=self.fonts["text_bold"],
            bg=self.colors["danger"],
            fg="white",
            padx=15, pady=5,
            bd=0, relief=tk.FLAT,
            cursor="hand2",
            command=edit_window.destroy
        )
        cancel_btn.pack(side=tk.RIGHT, padx=10)


            def manage_multi_section_courses(self):
        """وظيفة إدارة الدورات متعددة الفصول"""
        # إنشاء نافذة جديدة
        multi_window = tk.Toplevel(self.root)
        multi_window.bind("<Motion>", lambda e: self.root.reset_activity_timer() if hasattr(self.root,
                                                                                            'reset_activity_timer') else None)
        multi_window.title("إدارة الفصول و تصدير الكشوفات")
        multi_window.geometry("900x600")
        multi_window.configure(bg=self.colors["light"])
        multi_window.grab_set()
        multi_window.resizable(True, True)

        # توسيط النافذة
        x = (multi_window.winfo_screenwidth() - 900) // 2
        y = (multi_window.winfo_screenheight() - 600) // 2
        multi_window.geometry(f"900x600+{x}+{y}")

        # عنوان النافذة
        tk.Label(
            multi_window,
            text="إدارة الفصول و تصدير الكشوفات",
            font=self.fonts["large_title"],
            bg=self.colors["primary"],
            fg="white",
            padx=10, pady=10
        ).pack(fill=tk.X)

        # تعديل: إضافة إطار جديد لعرض معلومات إجمالي المتدربين تحت العنوان مباشرة
        students_info_frame = tk.Frame(multi_window, bg=self.colors["light"], padx=10, pady=5)
        students_info_frame.pack(fill=tk.X)

        # تعديل: متغير لعرض إجمالي عدد المتدربين
        total_students_var = tk.StringVar(value="")
        total_students_label = tk.Label(
            students_info_frame,
            textvariable=total_students_var,
            font=self.fonts["text_bold"],
            bg=self.colors["light"],
            fg=self.colors["primary"]
        )
        total_students_label.pack(pady=5)

        # إطار اختيار الدورة
        course_frame = tk.Frame(multi_window, bg=self.colors["light"], padx=10, pady=10)
        course_frame.pack(fill=tk.X)

        tk.Label(
            course_frame,
            text="اختيار الدورة:",
            font=self.fonts["text_bold"],
            bg=self.colors["light"]
        ).pack(side=tk.RIGHT, padx=5)

        # الحصول على قائمة الدورات
        cursor = self.conn.cursor()
        cursor.execute("SELECT DISTINCT course_name FROM course_sections")
        multi_section_courses = [row[0] for row in cursor.fetchall()]

        course_var = tk.StringVar()
        course_dropdown = ttk.Combobox(
            course_frame,
            textvariable=course_var,
            values=multi_section_courses,
            width=30,
            font=self.fonts["text"]
        )
        course_dropdown.pack(side=tk.RIGHT, padx=5)

        # زر تحديث قائمة الدورات
        refresh_btn = tk.Button(
            course_frame,
            text="تحديث",
            font=self.fonts["text_bold"],
            bg=self.colors["secondary"],
            fg="white",
            padx=10, pady=2,
            bd=0, relief=tk.FLAT,
            cursor="hand2",
            command=lambda: update_sections_list()
        )
        refresh_btn.pack(side=tk.LEFT, padx=5)

        #زر تعديل تاريخ الدورة
        edit_course_info_btn = tk.Button(
            course_frame,
            text="تعديل تواريخ الدورة",
            font=self.fonts["text_bold"],
            bg=self.colors["warning"],
            fg="white",
            padx=10, pady=2,
            bd=0, relief=tk.FLAT,
            cursor="hand2",
            command=lambda: self.edit_course_dates(course_var.get())
        )
        edit_course_info_btn.pack(side=tk.LEFT, padx=5)

        # إضافة زر حذف الدورة كاملة (للمشرفين فقط)
        if self.current_user["permissions"]["is_admin"]:
            delete_course_btn = tk.Button(
                course_frame,
                text="حذف الدورة كاملة",
                font=self.fonts["text_bold"],
                bg=self.colors["danger"],
                fg="white",
                padx=10, pady=2,
                bd=0, relief=tk.FLAT,
                cursor="hand2",
                command=lambda: delete_entire_course()
            )
            delete_course_btn.pack(side=tk.LEFT, padx=5)


        # إطار عرض الفصول
        sections_frame = tk.LabelFrame(
            multi_window,
            text="الفصول المتاحة",
            font=self.fonts["subtitle"],
            bg=self.colors["light"],
            fg=self.colors["dark"],
            padx=10, pady=10
        )
        sections_frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=5)

        # قائمة الفصول
        list_frame = tk.Frame(sections_frame, bg=self.colors["light"])
        list_frame.pack(side=tk.LEFT, fill=tk.BOTH, expand=True, padx=5, pady=5)

        list_scroll = tk.Scrollbar(list_frame)
        list_scroll.pack(side=tk.RIGHT, fill=tk.Y)

        sections_listbox = tk.Listbox(
            list_frame,
            font=self.fonts["text"],
            selectbackground=self.colors["primary"],
            selectforeground="white",
            yscrollcommand=list_scroll.set
        )
        sections_listbox.pack(fill=tk.BOTH, expand=True)
        list_scroll.config(command=sections_listbox.yview)

        # إطار التفاصيل
        details_frame = tk.Frame(sections_frame, bg=self.colors["light"], width=350)
        details_frame.pack(side=tk.RIGHT, fill=tk.BOTH, padx=5, pady=5)

        # عنوان التفاصيل
        section_title_var = tk.StringVar(value="اختر فصلاً لعرض تفاصيله")
        section_title = tk.Label(
            details_frame,
            textvariable=section_title_var,
            font=self.fonts["text_bold"],
            bg=self.colors["light"],
            fg=self.colors["primary"]
        )
        section_title.pack(pady=(0, 10))

        # تعديل: نحتفظ بمتغير عدد المتدربين للاستخدام الداخلي دون عرضه في إطار التفاصيل
        students_count_var = tk.StringVar(value="")

        # أزرار الإجراءات
        actions_frame = tk.Frame(details_frame, bg=self.colors["light"], pady=10)
        actions_frame.pack(fill=tk.X)

        export_attendance_btn = tk.Button(
            actions_frame,
            text="تصدير كشف حضور",
            font=self.fonts["text_bold"],
            bg=self.colors["primary"],
            fg="white",
            padx=10, pady=5,
            bd=0, relief=tk.FLAT,
            cursor="hand2",
            command=lambda: export_section_attendance_sheet()
        )
        export_attendance_btn.pack(fill=tk.X, pady=5)

        export_diligence_btn = tk.Button(
            actions_frame,
            text="تصدير كشف المواظبة والسلوك",
            font=self.fonts["text_bold"],
            bg="#8E44AD",
            fg="white",
            padx=10, pady=5,
            bd=0, relief=tk.FLAT,
            cursor="hand2",
            command=lambda: export_section_diligence()
        )
        export_diligence_btn.pack(fill=tk.X, pady=5)

        view_students_btn = tk.Button(
            actions_frame,
            text="عرض المتدربين وإدارة الفصول",
            font=self.fonts["text_bold"],
            bg=self.colors["success"],
            fg="white",
            padx=10, pady=5,
            bd=0, relief=tk.FLAT,
            cursor="hand2",
            command=lambda: manage_section_students()
        )
        view_students_btn.pack(fill=tk.X, pady=5)

        rename_section_btn = tk.Button(
            actions_frame,
            text="تغيير اسم الفصل",
            font=self.fonts["text_bold"],
            bg=self.colors["warning"],
            fg="white",
            padx=10, pady=5,
            bd=0, relief=tk.FLAT,
            cursor="hand2",
            command=lambda: rename_section()
        )
        rename_section_btn.pack(fill=tk.X, pady=5)

        # إضافة زر حذف الفصل مع ترحيل المتدربين (متاح للجميع)
        delete_section_btn = tk.Button(
            actions_frame,
            text="حذف الفصل مع ترحيل المتدربين",
            font=self.fonts["text_bold"],
            bg=self.colors["danger"],
            fg="white",
            padx=10, pady=5,
            bd=0, relief=tk.FLAT,
            cursor="hand2",
            command=lambda: delete_section_with_transfer()
        )
        delete_section_btn.pack(fill=tk.X, pady=5)

        # الإطار السفلي للأزرار
        bottom_frame = tk.Frame(multi_window, bg=self.colors["light"], pady=10)
        bottom_frame.pack(fill=tk.X, padx=10)

        add_section_btn = tk.Button(
            bottom_frame,
            text="إضافة فصل جديد",
            font=self.fonts["text_bold"],
            bg=self.colors["success"],
            fg="white",
            padx=15, pady=5,
            bd=0, relief=tk.FLAT,
            cursor="hand2",
            command=lambda: add_new_section()
        )
        add_section_btn.pack(side=tk.LEFT, padx=5)

        # هنا يتم إضافة الزر الجديد
        import_sections_btn = tk.Button(
            bottom_frame,
            text="استيراد تحديثات الفصول",
            font=self.fonts["text_bold"],
            bg="#FF9800",  # لون برتقالي للتمييز
            fg="white",
            padx=15, pady=5,
            bd=0, relief=tk.FLAT,
            cursor="hand2",
            command=lambda: import_section_updates()
        )
        import_sections_btn.pack(side=tk.LEFT, padx=5)

        # تعريف دالة للإغلاق مع تحديث البيانات
        def on_close_multi_window():
            multi_window.destroy()
            self.update_statistics()
            self.update_students_tree()
            self.update_attendance_display()  # إضافة هذا السطر لتحديث عرض سجل الحضور أيضاً

        close_btn = tk.Button(
            bottom_frame,
            text="إغلاق",
            font=self.fonts["text_bold"],
            bg=self.colors["dark"],
            fg="white",
            padx=15, pady=5,
            bd=0, relief=tk.FLAT,
            cursor="hand2",
            command=on_close_multi_window  # استخدام الدالة الجديدة بدلاً من multi_window.destroy
        )
        close_btn.pack(side=tk.RIGHT, padx=5)

        def import_section_updates():
            """استيراد تحديثات توزيع المتدربين على الفصول من ملف Excel مع دعم الأعمدة باللغة العربية"""
            selected_course = course_var.get().strip()
            if not selected_course:
                messagebox.showwarning("تنبيه", "الرجاء اختيار دورة أولاً")
                return

            # اختيار ملف Excel
            file_path = filedialog.askopenfilename(
                title="اختر ملف تحديثات الفصول",
                filetypes=[("Excel files", "*.xlsx"), ("All files", "*.*")]
            )

            if not file_path:
                return

            # إنشاء نافذة تقدم العملية
            progress_window = tk.Toplevel(multi_window)
            progress_window.title("استيراد تحديثات الفصول")
            progress_window.geometry("450x180")
            progress_window.configure(bg=self.colors["light"])
            progress_window.transient(multi_window)
            progress_window.grab_set()

            # توسيط النافذة
            x = (progress_window.winfo_screenwidth() - 450) // 2
            y = (progress_window.winfo_screenheight() - 180) // 2
            progress_window.geometry(f"450x180+{x}+{y}")

            tk.Label(
                progress_window,
                text=f"جاري معالجة تحديثات الفصول لدورة: {selected_course}",
                font=self.fonts["text_bold"],
                bg=self.colors["light"],
                pady=10
            ).pack()

            progress_var = tk.DoubleVar()
            progress_bar = ttk.Progressbar(
                progress_window,
                variable=progress_var,
                maximum=100,
                length=400
            )
            progress_bar.pack(pady=10)

            status_label = tk.Label(
                progress_window,
                text="جاري قراءة ملف Excel...",
                font=self.fonts["text"],
                bg=self.colors["light"]
            )
            status_label.pack(pady=5)

            progress_window.update()

            try:
                # قراءة ملف Excel
                progress_var.set(10)
                status_label.config(text="جاري قراءة ملف Excel...")
                progress_window.update()

                df = pd.read_excel(file_path)

                # تعريف ترجمة أسماء الأعمدة (دعم العربية والإنجليزية)
                column_mapping = {
                    'رقم الهوية': 'national_id',
                    'الفصل': 'section_name',
                    'اسم الفصل': 'section_name',
                    'national_id': 'national_id',
                    'section_name': 'section_name'
                }

                # تحويل أسماء الأعمدة من العربية إلى الإنجليزية
                rename_dict = {}
                for orig_col in df.columns:
                    if orig_col in column_mapping:
                        rename_dict[orig_col] = column_mapping[orig_col]

                if rename_dict:
                    df = df.rename(columns=rename_dict)

                # التحقق من وجود الأعمدة المطلوبة
                has_id = any(col in ["رقم الهوية", "national_id"] for col in df.columns)
                has_section = any(col in ["الفصل", "اسم الفصل", "section_name"] for col in df.columns)

                if not (has_id and has_section):
                    progress_window.destroy()
                    messagebox.showwarning("تنبيه",
                                           f"يجب أن يحتوي ملف التحديثات على الأعمدة التالية:\n\n" +
                                           "• رقم الهوية (national_id)\n" +
                                           "• الفصل (section_name)")
                    return

                # التحقق من صحة الفصول المذكورة في الملف
                progress_var.set(20)
                status_label.config(text="التحقق من صحة بيانات الفصول...")
                progress_window.update()

                # الحصول على قائمة الفصول المتاحة في الدورة
                cursor = self.conn.cursor()
                cursor.execute("""
                    SELECT section_name
                    FROM course_sections
                    WHERE course_name=?
                """, (selected_course,))

                available_sections = {row[0] for row in cursor.fetchall()}

                # التحقق من وجود الفصول المذكورة في الملف
                unique_sections = set(df['section_name'].dropna())
                invalid_sections = unique_sections - available_sections

                if invalid_sections:
                    progress_window.destroy()
                    messagebox.showwarning("تنبيه",
                                           f"توجد فصول غير موجودة في الدورة: {', '.join(invalid_sections)}\n\n" +
                                           "الفصول المتاحة هي: " + ', '.join(available_sections))
                    return

                # التحقق من وجود المتدربين المذكورين في ملف التحديثات
                progress_var.set(30)
                status_label.config(text="التحقق من بيانات المتدربين...")
                progress_window.update()

                # الحصول على قائمة المتدربين في الدورة الحالية
                cursor.execute("""
                    SELECT national_id, name
                    FROM trainees
                    WHERE course=? AND is_excluded=0
                """, (selected_course,))

                students_dict = {row[0]: row[1] for row in cursor.fetchall()}

                # التحقق من وجود جميع المتدربين المذكورين في الملف
                student_ids = df['national_id'].astype(str).tolist()
                invalid_students = [sid for sid in student_ids if sid not in students_dict]

                if invalid_students:
                    if len(invalid_students) > 5:
                        invalid_display = ', '.join(invalid_students[:5]) + f' وغيرهم ({len(invalid_students) - 5})'
                    else:
                        invalid_display = ', '.join(invalid_students)

                    proceed = messagebox.askyesno("تنبيه - متدربين غير موجودين",
                                                  f"هناك {len(invalid_students)} متدرب غير موجود في الدورة: {invalid_display}\n\n" +
                                                  "هل تريد المتابعة وتجاهل هؤلاء المتدربين؟")

                    if not proceed:
                        progress_window.destroy()
                        return

                # تحضير التغييرات
                progress_var.set(50)
                status_label.config(text="تحضير التغييرات...")
                progress_window.update()

                # الحصول على التوزيع الحالي للمتدربين على الفصول
                cursor.execute("""
                    SELECT national_id, section_name
                    FROM student_sections
                    WHERE course_name=?
                """, (selected_course,))

                current_assignments = {row[0]: row[1] for row in cursor.fetchall()}

                # تحضير قائمة التغييرات
                changes = []
                no_changes = []
                new_assignments = []

                for _, row in df.iterrows():
                    student_id = str(row['national_id']).strip()
                    new_section = str(row['section_name']).strip()

                    # تخطي المتدربين غير الموجودين
                    if student_id not in students_dict:
                        continue

                    # التحقق إذا كان المتدرب في فصل مختلف حاليًا
                    if student_id in current_assignments:
                        current_section = current_assignments[student_id]

                        if current_section != new_section:
                            # تغيير الفصل
                            changes.append((student_id, students_dict[student_id], current_section, new_section))
                        else:
                            # لا تغيير
                            no_changes.append((student_id, students_dict[student_id], current_section))
                    else:
                        # متدرب جديد ليس في أي فصل سابقًا
                        new_assignments.append((student_id, students_dict[student_id], new_section))

                # عرض ملخص التغييرات المقترحة
                progress_var.set(70)
                status_label.config(text="تجهيز ملخص التغييرات...")
                progress_window.update()

                summary = f"ملخص التغييرات:\n\n"
                summary += f"• عدد المتدربين الذين سيتم نقلهم بين الفصول: {len(changes)}\n"
                summary += f"• عدد المتدربين الجدد المراد تسجيلهم في فصول: {len(new_assignments)}\n"
                summary += f"• عدد المتدربين بدون تغيير: {len(no_changes)}\n"

                if invalid_students:
                    summary += f"• عدد المتدربين غير الموجودين في الدورة: {len(invalid_students)} (سيتم تجاهلهم)\n"

                progress_window.destroy()

                # عرض نافذة ملخص التغييرات
                summary_window = tk.Toplevel(multi_window)
                summary_window.title("ملخص التغييرات المقترحة")
                summary_window.geometry("600x500")
                summary_window.configure(bg=self.colors["light"])
                summary_window.transient(multi_window)
                summary_window.grab_set()

                # توسيط النافذة
                x = (summary_window.winfo_screenwidth() - 600) // 2
                y = (summary_window.winfo_screenheight() - 500) // 2
                summary_window.geometry(f"600x500+{x}+{y}")

                tk.Label(
                    summary_window,
                    text="ملخص التغييرات المقترحة",
                    font=self.fonts["title"],
                    bg=self.colors["primary"],
                    fg="white",
                    padx=10, pady=10
                ).pack(fill=tk.X)

                # عرض ملخص التغييرات
                summary_frame = tk.Frame(summary_window, bg=self.colors["light"], padx=10, pady=10)
                summary_frame.pack(fill=tk.BOTH, expand=True)

                tk.Label(
                    summary_frame,
                    text=summary,
                    font=self.fonts["text"],
                    bg=self.colors["light"],
                    justify=tk.RIGHT,
                    anchor=tk.E
                ).pack(fill=tk.X, pady=10)

                # إنشاء نوتبوك لعرض التفاصيل
                details_notebook = ttk.Notebook(summary_frame)
                details_notebook.pack(fill=tk.BOTH, expand=True, pady=10)

                # تبويب المتدربين المنقولين
                if changes:
                    changes_frame = tk.Frame(details_notebook, bg=self.colors["light"])
                    details_notebook.add(changes_frame, text=f"متدربين سيتم نقلهم ({len(changes)})")

                    changes_list = tk.Text(changes_frame, font=self.fonts["text"], width=70, height=15)
                    changes_list.pack(fill=tk.BOTH, expand=True, padx=5, pady=5)

                    for student_id, name, old_section, new_section in changes:
                        changes_list.insert(tk.END,
                                            f"{name} ({student_id}): من فصل {old_section} إلى فصل {new_section}\n")

                    changes_list.configure(state="disabled")

                # تبويب المتدربين الجدد
                if new_assignments:
                    new_frame = tk.Frame(details_notebook, bg=self.colors["light"])
                    details_notebook.add(new_frame, text=f"تسجيلات جديدة ({len(new_assignments)})")

                    new_list = tk.Text(new_frame, font=self.fonts["text"], width=70, height=15)
                    new_list.pack(fill=tk.BOTH, expand=True, padx=5, pady=5)

                    for student_id, name, section in new_assignments:
                        new_list.insert(tk.END, f"{name} ({student_id}): تسجيل في فصل {section}\n")

                    new_list.configure(state="disabled")

                # أزرار التأكيد أو الإلغاء
                button_frame = tk.Frame(summary_window, bg=self.colors["light"], pady=10)
                button_frame.pack(fill=tk.X, padx=10)

                def apply_changes():
                    # تنفيذ التغييرات
                    try:
                        current_date = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")

                        progress_window = tk.Toplevel(summary_window)
                        progress_window.title("تنفيذ التغييرات")
                        progress_window.geometry("450x180")
                        progress_window.configure(bg=self.colors["light"])
                        progress_window.transient(summary_window)
                        progress_window.grab_set()

                        # توسيط النافذة
                        x = (progress_window.winfo_screenwidth() - 450) // 2
                        y = (progress_window.winfo_screenheight() - 180) // 2
                        progress_window.geometry(f"450x180+{x}+{y}")

                        tk.Label(
                            progress_window,
                            text="جاري تنفيذ التغييرات...",
                            font=self.fonts["text_bold"],
                            bg=self.colors["light"],
                            pady=10
                        ).pack()

                        progress_var = tk.DoubleVar()
                        progress_bar = ttk.Progressbar(
                            progress_window,
                            variable=progress_var,
                            maximum=100,
                            length=400
                        )
                        progress_bar.pack(pady=10)

                        status_label = tk.Label(
                            progress_window,
                            text="جاري الإعداد...",
                            font=self.fonts["text"],
                            bg=self.colors["light"]
                        )
                        status_label.pack(pady=5)

                        progress_window.update()

                        with self.conn:
                            # تنفيذ التغييرات
                            total_operations = len(changes) + len(new_assignments)
                            operations_done = 0

                            # 1. تحديث المتدربين الذين سيتم نقلهم
                            if changes:
                                status_label.config(text="جاري تعديل تسجيلات الفصول الحالية...")
                                progress_window.update()

                                for student_id, _, _, new_section in changes:
                                    self.conn.execute("""
                                        UPDATE student_sections
                                        SET section_name=?, assigned_date=?
                                        WHERE national_id=? AND course_name=?
                                    """, (new_section, current_date, student_id, selected_course))

                                    operations_done += 1
                                    progress_percent = (operations_done / total_operations) * 100
                                    progress_var.set(progress_percent)
                                    progress_window.update()

                            # 2. إضافة المتدربين الجدد
                            if new_assignments:
                                status_label.config(text="جاري إضافة تسجيلات جديدة للفصول...")
                                progress_window.update()

                                for student_id, _, section in new_assignments:
                                    self.conn.execute("""
                                        INSERT OR REPLACE INTO student_sections
                                        (national_id, course_name, section_name, assigned_date)
                                        VALUES (?, ?, ?, ?)
                                    """, (student_id, selected_course, section, current_date))

                                    operations_done += 1
                                    progress_percent = (operations_done / total_operations) * 100
                                    progress_var.set(progress_percent)
                                    progress_window.update()

                        progress_var.set(100)
                        status_label.config(text="تم تنفيذ التغييرات بنجاح!")
                        progress_window.update()

                        # إغلاق نافذة التقدم بعد ثانيتين
                        progress_window.after(2000, progress_window.destroy)

                        # إغلاق نافذة الملخص
                        summary_window.destroy()

                        # عرض رسالة نجاح
                        messagebox.showinfo("نجاح", "تم تنفيذ تحديثات الفصول بنجاح!")

                        # تحديث القوائم
                        update_sections_list()

                    except Exception as e:
                        try:
                            progress_window.destroy()
                        except:
                            pass

                        messagebox.showerror("خطأ", f"حدث خطأ أثناء تنفيذ التغييرات: {str(e)}")

                confirm_btn = tk.Button(
                    button_frame,
                    text="تنفيذ التغييرات",
                    font=self.fonts["text_bold"],
                    bg=self.colors["success"],
                    fg="white",
                    padx=15, pady=5,
                    bd=0, relief=tk.FLAT,
                    cursor="hand2",
                    command=apply_changes
                )
                confirm_btn.pack(side=tk.LEFT, padx=5)

                cancel_btn = tk.Button(
                    button_frame,
                    text="إلغاء",
                    font=self.fonts["text_bold"],
                    bg=self.colors["danger"],
                    fg="white",
                    padx=15, pady=5,
                    bd=0, relief=tk.FLAT,
                    cursor="hand2",
                    command=summary_window.destroy
                )
                cancel_btn.pack(side=tk.RIGHT, padx=5)

            except Exception as e:
                try:
                    progress_window.destroy()
                except:
                    pass

                messagebox.showerror("خطأ", f"حدث خطأ أثناء معالجة ملف التحديثات: {str(e)}")

        # الوظائف المساعدة ضمن النافذة
        def update_sections_list():
            """تحديث قائمة الفصول المتاحة للدورة المحددة"""
            selected_course = course_var.get().strip()
            sections_listbox.delete(0, tk.END)

            # تعديل: إعادة ضبط متغيرات العرض
            section_title_var.set("اختر فصلاً لعرض تفاصيله")
            students_count_var.set("")

            if not selected_course:
                total_students_var.set("")
                return

            # تعديل: تحديث إجمالي عدد المتدربين في الدورة
            cursor = self.conn.cursor()
            cursor.execute("""
                SELECT COUNT(DISTINCT t.national_id)
                FROM trainees t
                WHERE t.course=? AND t.is_excluded=0
            """, (selected_course,))

            total_count = cursor.fetchone()[0]
            total_students_var.set(f"إجمالي المتدربين الملتحقين بدورة \"{selected_course}\": {total_count}")

            cursor = self.conn.cursor()
            cursor.execute("""
                SELECT section_name
                FROM course_sections
                WHERE course_name=?
                ORDER BY section_name
            """, (selected_course,))

            sections = cursor.fetchall()

            for section in sections:
                sections_listbox.insert(tk.END, section[0])

        def on_section_select(event=None):
            """عند اختيار فصل من القائمة"""
            selected_indices = sections_listbox.curselection()
            if not selected_indices:
                return

            selected_course = course_var.get().strip()
            selected_section = sections_listbox.get(selected_indices[0])

            if not selected_course or not selected_section:
                return

            # تحديث عنوان التفاصيل
            section_title_var.set(f"فصل: {selected_section}")

            # حساب عدد المتدربين
            cursor = self.conn.cursor()
            cursor.execute("""
                SELECT COUNT(*)
                FROM student_sections
                WHERE course_name=? AND section_name=?
            """, (selected_course, selected_section))

            count = cursor.fetchone()[0]
            students_count_var.set(f"عدد المتدربين في فصل \"{selected_section}\": {count}")

            # تعديل: تحديث عرض عدد المتدربين في العنوان
            total_students_var.set(students_count_var.get())

        def add_new_section():
            """إضافة فصل جديد للدورة المحددة"""
            selected_course = course_var.get().strip()

            if not selected_course:
                messagebox.showwarning("تنبيه", "الرجاء اختيار دورة أولاً")
                return

            section_name = simpledialog.askstring("إضافة فصل", "أدخل اسم الفصل الجديد:")

            if not section_name:
                return

            # التحقق من وجود الفصل
            cursor = self.conn.cursor()
            cursor.execute("""
                SELECT COUNT(*)
                FROM course_sections
                WHERE course_name=? AND section_name=?
            """, (selected_course, section_name))

            if cursor.fetchone()[0] > 0:
                messagebox.showwarning("تنبيه", f"الفصل '{section_name}' موجود بالفعل في هذه الدورة")
                return

            # إضافة الفصل الجديد
            try:
                current_date = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
                with self.conn:
                    self.conn.execute("""
                        INSERT INTO course_sections (course_name, section_name, created_date)
                        VALUES (?, ?, ?)
                    """, (selected_course, section_name, current_date))

                messagebox.showinfo("نجاح", f"تم إضافة الفصل '{section_name}' بنجاح")
                update_sections_list()
            except Exception as e:
                messagebox.showerror("خطأ", f"حدث خطأ أثناء إضافة الفصل: {str(e)}")

        def rename_section():
            """تغيير اسم الفصل المحدد"""
            selected_indices = sections_listbox.curselection()
            if not selected_indices:
                messagebox.showwarning("تنبيه", "الرجاء اختيار فصل أولاً")
                return

            selected_course = course_var.get().strip()
            old_section_name = sections_listbox.get(selected_indices[0])

            new_section_name = simpledialog.askstring("تغيير اسم الفصل", "أدخل الاسم الجديد للفصل:",
                                                      initialvalue=old_section_name)

            if not new_section_name or new_section_name == old_section_name:
                return

            # التحقق من وجود الفصل الجديد
            cursor = self.conn.cursor()
            cursor.execute("""
                SELECT COUNT(*)
                FROM course_sections
                WHERE course_name=? AND section_name=?
            """, (selected_course, new_section_name))

            if cursor.fetchone()[0] > 0:
                messagebox.showwarning("تنبيه", f"الفصل '{new_section_name}' موجود بالفعل في هذه الدورة")
                return

            # تحديث اسم الفصل
            try:
                with self.conn:
                    # تحديث في جدول الفصول
                    self.conn.execute("""
                        UPDATE course_sections
                        SET section_name=?
                        WHERE course_name=? AND section_name=?
                    """, (new_section_name, selected_course, old_section_name))

                    # تحديث في جدول المتدربين
                    self.conn.execute("""
                        UPDATE student_sections
                        SET section_name=?
                        WHERE course_name=? AND section_name=?
                    """, (new_section_name, selected_course, old_section_name))

                messagebox.showinfo("نجاح", f"تم تغيير اسم الفصل إلى '{new_section_name}' بنجاح")
                update_sections_list()
            except Exception as e:
                messagebox.showerror("خطأ", f"حدث خطأ أثناء تغيير اسم الفصل: {str(e)}")

        def manage_section_students():
            """إدارة متدربين الفصل المحدد"""
            selected_indices = sections_listbox.curselection()
            if not selected_indices:
                messagebox.showwarning("تنبيه", "الرجاء اختيار فصل أولاً")
                return

            selected_course = course_var.get().strip()
            selected_section = sections_listbox.get(selected_indices[0])

            # فتح نافذة إدارة متدربين الفصل
            self.open_section_students_window(selected_course, selected_section)

        def export_section_attendance_sheet():
            """تصدير كشف حضور للفصل المحدد"""
            selected_indices = sections_listbox.curselection()
            if not selected_indices:
                messagebox.showwarning("تنبيه", "الرجاء اختيار فصل أولاً")
                return

            selected_course = course_var.get().strip()
            selected_section = sections_listbox.get(selected_indices[0])

            # تنفيذ وظيفة تصدير كشف الحضور للفصل
            self.export_section_to_word(selected_course, selected_section)

        def export_section_diligence():
            """تصدير كشف المواظبة والسلوك للفصل المحدد"""
            selected_indices = sections_listbox.curselection()
            if not selected_indices:
                messagebox.showwarning("تنبيه", "الرجاء اختيار فصل أولاً")
                return

            selected_course = course_var.get().strip()
            selected_section = sections_listbox.get(selected_indices[0])

            # تنفيذ وظيفة تصدير كشف المواظبة والسلوك للفصل
            self.export_section_diligence_behavior(selected_course, selected_section)

        # وظيفة حذف الفصل مع ترحيل المتدربين
        def delete_section_with_transfer():
            """حذف الفصل مع ترحيل المتدربين إلى فصل آخر"""
            selected_indices = sections_listbox.curselection()
            if not selected_indices:
                messagebox.showwarning("تنبيه", "الرجاء اختيار فصل للحذف")
                return

            selected_course = course_var.get().strip()
            selected_section = sections_listbox.get(selected_indices[0])

            # الحصول على عدد المتدربين في الفصل المحدد
            cursor = self.conn.cursor()
            cursor.execute("""
                SELECT COUNT(*)
                FROM student_sections
                WHERE course_name=? AND section_name=?
            """, (selected_course, selected_section))

            students_count = cursor.fetchone()[0]

            # التحقق من وجود فصول أخرى
            cursor.execute("""
                SELECT section_name
                FROM course_sections
                WHERE course_name=? AND section_name!=?
            """, (selected_course, selected_section))

            other_sections = [row[0] for row in cursor.fetchall()]

            if not other_sections:
                messagebox.showwarning("تنبيه",
                                       f"لا يوجد فصول أخرى في الدورة '{selected_course}' لترحيل المتدربين إليها.\n\nيجب أن يتوفر فصل واحد على الأقل لنقل المتدربين إليه.")
                return

            # إذا كان هناك متدربين في الفصل، اطلب تحديد فصل للترحيل
            if students_count > 0:
                # عرض نافذة لاختيار الفصل المراد الترحيل إليه
                transfer_window = tk.Toplevel(multi_window)
                transfer_window.title("ترحيل المتدربين")
                transfer_window.geometry("400x300")
                transfer_window.configure(bg=self.colors["light"])
                transfer_window.transient(multi_window)
                transfer_window.grab_set()

                # توسيط النافذة
                x = (transfer_window.winfo_screenwidth() - 400) // 2
                y = (transfer_window.winfo_screenheight() - 300) // 2
                transfer_window.geometry(f"400x300+{x}+{y}")

                tk.Label(
                    transfer_window,
                    text=f"ترحيل متدربين الفصل: {selected_section}",
                    font=self.fonts["title"],
                    bg=self.colors["primary"],
                    fg="white",
                    padx=10, pady=10
                ).pack(fill=tk.X)

                tk.Label(
                    transfer_window,
                    text=f"يوجد {students_count} متدرب في هذا الفصل.\nاختر الفصل المراد ترحيل المتدربين إليه:",
                    font=self.fonts["text"],
                    bg=self.colors["light"],
                    pady=10
                ).pack()

                # قائمة الفصول المتاحة للترحيل
                target_var = tk.StringVar()
                target_listbox = tk.Listbox(
                    transfer_window,
                    font=self.fonts["text"],
                    selectbackground=self.colors["primary"],
                    selectforeground="white",
                    height=8
                )
                target_listbox.pack(fill=tk.X, padx=20, pady=10)

                # إضافة أسماء الفصول إلى القائمة
                for section in other_sections:
                    target_listbox.insert(tk.END, section)

                # إذا كان هناك فصل واحد فقط، حدده تلقائيًا
                if len(other_sections) == 1:
                    target_listbox.select_set(0)

                button_frame = tk.Frame(transfer_window, bg=self.colors["light"], pady=10)
                button_frame.pack(fill=tk.X, padx=20)

                def execute_transfer():
                    """تنفيذ عملية الترحيل وحذف الفصل"""
                    selected_indices = target_listbox.curselection()
                    if not selected_indices:
                        messagebox.showwarning("تنبيه", "الرجاء اختيار فصل للترحيل إليه")
                        return

                    target_section = target_listbox.get(selected_indices[0])

                    try:
                        with self.conn:
                            # ترحيل المتدربين إلى الفصل المحدد
                            self.conn.execute("""
                                UPDATE student_sections
                                SET section_name=?
                                WHERE course_name=? AND section_name=?
                            """, (target_section, selected_course, selected_section))

                            # حذف الفصل
                            self.conn.execute("""
                                DELETE FROM course_sections
                                WHERE course_name=? AND section_name=?
                            """, (selected_course, selected_section))

                        messagebox.showinfo("نجاح",
                                            f"تم ترحيل {students_count} متدرب من الفصل '{selected_section}' إلى الفصل '{target_section}' وحذف الفصل بنجاح")
                        transfer_window.destroy()
                        update_sections_list()

                        # تحديث الإحصائيات بعد عملية الترحيل
                        self.update_statistics()
                        self.update_students_tree()
                        self.update_attendance_display()

                    except Exception as e:
                        messagebox.showerror("خطأ", f"حدث خطأ أثناء الترحيل: {str(e)}")

                transfer_btn = tk.Button(
                    button_frame,
                    text="ترحيل وحذف",
                    font=self.fonts["text_bold"],
                    bg=self.colors["warning"],
                    fg="white",
                    padx=15, pady=5,
                    bd=0, relief=tk.FLAT,
                    cursor="hand2",
                    command=execute_transfer
                )
                transfer_btn.pack(side=tk.LEFT)

                cancel_btn = tk.Button(
                    button_frame,
                    text="إلغاء",
                    font=self.fonts["text_bold"],
                    bg=self.colors["danger"],
                    fg="white",
                    padx=15, pady=5,
                    bd=0, relief=tk.FLAT,
                    cursor="hand2",
                    command=transfer_window.destroy
                )
                cancel_btn.pack(side=tk.RIGHT)

            else:
                # إذا لم يكن هناك متدربين، يمكن حذف الفصل مباشرة
                if messagebox.askyesno("تأكيد", f"هل أنت متأكد من حذف الفصل '{selected_section}'؟"):
                    try:
                        with self.conn:
                            self.conn.execute("""
                                DELETE FROM course_sections
                                WHERE course_name=? AND section_name=?
                            """, (selected_course, selected_section))

                        messagebox.showinfo("نجاح", f"تم حذف الفصل '{selected_section}' بنجاح")
                        update_sections_list()

                        # تحديث الإحصائيات بعد حذف الفصل
                        self.update_statistics()
                        self.update_students_tree()
                        self.update_attendance_display()

                    except Exception as e:
                        messagebox.showerror("خطأ", f"حدث خطأ أثناء حذف الفصل: {str(e)}")

        # وظيفة حذف الدورة كاملة (للمشرفين فقط)
        def delete_entire_course():
            """حذف الدورة كاملة مع جميع الفصول والمتدربين"""
            if not self.current_user["permissions"]["is_admin"]:
                messagebox.showwarning("تنبيه", "هذه الوظيفة متاحة للمشرفين فقط")
                return

            selected_course = course_var.get().strip()
            if not selected_course:
                messagebox.showwarning("تنبيه", "الرجاء اختيار دورة للحذف")
                return

            # التأكيد قبل الحذف
            confirmation = messagebox.askquestion(
                "تحذير - حذف دورة كاملة",
                f"تحذير! أنت على وشك حذف الدورة '{selected_course}' بالكامل.\n\n"
                "سيؤدي هذا إلى:\n"
                "• حذف جميع الفصول في الدورة\n"
                "• حذف جميع المتدربين المرتبطين بالدورة\n"
                "• حذف جميع سجلات الحضور المرتبطة بالدورة\n\n"
                "هذا الإجراء لا يمكن التراجع عنه.\n\n"
                "هل أنت متأكد من رغبتك في حذف الدورة بالكامل؟",
                icon="warning",
                type="yesnocancel"
            )

            if confirmation != "yes":
                return

            # طلب كلمة مرور المشرف للتأكيد
            admin_password = simpledialog.askstring(
                "تأكيد حذف الدورة",
                "أدخل كلمة مرور المشرف للتأكيد:",
                show="*"
            )

            if not admin_password:
                return

            # التحقق من كلمة المرور
            hashed_password = hashlib.sha256(admin_password.encode()).hexdigest()
            cursor = self.conn.cursor()
            cursor.execute("SELECT password FROM users WHERE username=?", ("admin",))
            result = cursor.fetchone()

            if not result or result[0] != hashed_password:
                messagebox.showwarning("تنبيه", "كلمة المرور غير صحيحة")
                return

            # بدء عملية الحذف
            try:
                # إظهار نافذة تقدم العملية
                progress_window = tk.Toplevel(multi_window)
                progress_window.title("جاري حذف الدورة")
                progress_window.geometry("400x150")
                progress_window.configure(bg=self.colors["light"])
                progress_window.transient(multi_window)
                progress_window.grab_set()

                # توسيط النافذة
                x = (progress_window.winfo_screenwidth() - 400) // 2
                y = (progress_window.winfo_screenheight() - 150) // 2
                progress_window.geometry(f"400x150+{x}+{y}")

                tk.Label(
                    progress_window,
                    text=f"جاري حذف الدورة '{selected_course}'...",
                    font=self.fonts["text_bold"],
                    bg=self.colors["light"],
                    pady=10
                ).pack()

                progress_var = tk.DoubleVar()
                progress_bar = ttk.Progressbar(
                    progress_window,
                    variable=progress_var,
                    maximum=100,
                    length=350
                )
                progress_bar.pack(pady=10)

                status_label = tk.Label(
                    progress_window,
                    text="جاري تحضير العملية...",
                    font=self.fonts["text"],
                    bg=self.colors["light"]
                )
                status_label.pack(pady=5)

                progress_window.update()

                # الحصول على جميع أرقام هويات المتدربين في الدورة
                cursor.execute("""
                    SELECT national_id 
                    FROM trainees 
                    WHERE course=?
                """, (selected_course,))
                student_ids = [row[0] for row in cursor.fetchall()]

                total_steps = 3
                current_step = 0

                # 1. حذف سجلات الحضور
                progress_var.set((current_step / total_steps) * 100)
                status_label.config(text="جاري حذف سجلات الحضور...")
                progress_window.update()

                with self.conn:
                    for student_id in student_ids:
                        self.conn.execute("""
                            DELETE FROM attendance 
                            WHERE national_id=?
                        """, (student_id,))

                current_step += 1
                progress_var.set((current_step / total_steps) * 100)
                status_label.config(text="جاري حذف سجلات الفصول...")
                progress_window.update()

                # 2. حذف سجلات الفصول
                with self.conn:
                    self.conn.execute("""
                        DELETE FROM student_sections 
                        WHERE course_name=?
                    """, (selected_course,))

                    self.conn.execute("""
                        DELETE FROM course_sections 
                        WHERE course_name=?
                    """, (selected_course,))

                current_step += 1
                progress_var.set((current_step / total_steps) * 100)
                status_label.config(text="جاري حذف بيانات المتدربين...")
                progress_window.update()

                # 3. حذف المتدربين
                with self.conn:
                    self.conn.execute("""
                        DELETE FROM trainees 
                        WHERE course=?
                    """, (selected_course,))

                current_step += 1
                progress_var.set(100)
                status_label.config(text="تم حذف الدورة بنجاح!")
                progress_window.update()

                # تحديث الإحصائيات بعد الحذف
                self.update_statistics()
                self.update_students_tree()
                self.update_attendance_display()

                # إغلاق نافذة التقدم بعد ثلاث ثوان
                progress_window.after(3000, progress_window.destroy)

                messagebox.showinfo("نجاح", f"تم حذف الدورة '{selected_course}' بنجاح مع جميع البيانات المرتبطة بها")

                # تحديث القائمة
                cursor.execute("SELECT DISTINCT course_name FROM course_sections")
                updated_courses = [row[0] for row in cursor.fetchall()]
                course_dropdown['values'] = updated_courses

                # مسح القيمة الحالية إذا تم حذفها
                if selected_course not in updated_courses:
                    course_var.set("")

                # تحديث قائمة الفصول
                sections_listbox.delete(0, tk.END)
                section_title_var.set("اختر فصلاً لعرض تفاصيله")
                students_count_var.set("")

            except Exception as e:
                messagebox.showerror("خطأ", f"حدث خطأ أثناء حذف الدورة: {str(e)}")
                try:
                    progress_window.destroy()
                except:
                    pass

        # ربط وظيفة اختيار الفصل
        sections_listbox.bind("<<ListboxSelect>>", on_section_select)

        # ربط وظيفة تحديث القائمة بتغيير الدورة
        course_dropdown.bind("<<ComboboxSelected>>", lambda e: update_sections_list())

    def open_section_students_window(self, course_name, section_name):
        """فتح نافذة إدارة متدربين الفصل"""
        students_window = tk.Toplevel(self.root)
        students_window.title(f"إدارة متدربين فصل {section_name} - {course_name}")
        students_window.geometry("900x600")
        students_window.configure(bg=self.colors["light"])
        students_window.grab_set()
        students_window.resizable(True, True)

        # توسيط النافذة
        x = (students_window.winfo_screenwidth() - 900) // 2
        y = (students_window.winfo_screenheight() - 600) // 2
        students_window.geometry(f"900x600+{x}+{y}")

        # عنوان النافذة
        tk.Label(
            students_window,
            text=f"إدارة متدربين فصل: {section_name} - دورة: {course_name}",
            font=self.fonts["title"],
            bg=self.colors["primary"],
            fg="white",
            padx=10, pady=10
        ).pack(fill=tk.X)

        # إطار البحث
        search_frame = tk.Frame(students_window, bg=self.colors["light"], padx=10, pady=10)
        search_frame.pack(fill=tk.X)

        tk.Label(
            search_frame,
            text="البحث عن متدرب:",
            font=self.fonts["text_bold"],
            bg=self.colors["light"]
        ).pack(side=tk.RIGHT, padx=5)

        search_var = tk.StringVar()
        search_entry = tk.Entry(
            search_frame,
            textvariable=search_var,
            font=self.fonts["text"],
            width=25
        )
        search_entry.pack(side=tk.RIGHT, padx=5)

        search_btn = tk.Button(
            search_frame,
            text="بحث",
            font=self.fonts["text_bold"],
            bg=self.colors["secondary"],
            fg="white",
            padx=10, pady=2,
            bd=0, relief=tk.FLAT,
            cursor="hand2",
            command=lambda: search_students()
        )
        search_btn.pack(side=tk.RIGHT, padx=5)

        # إطار القوائم المزدوجة
        lists_frame = tk.Frame(students_window, bg=self.colors["light"])
        lists_frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=5)

        # قائمة المتدربين في الفصل
        section_frame = tk.LabelFrame(
            lists_frame,
            text=f"متدربين فصل {section_name}",
            font=self.fonts["text_bold"],
            bg=self.colors["light"],
            fg=self.colors["dark"],
            padx=5, pady=5
        )
        section_frame.pack(side=tk.LEFT, fill=tk.BOTH, expand=True, padx=(0, 5))

        section_scroll = tk.Scrollbar(section_frame)
        section_scroll.pack(side=tk.RIGHT, fill=tk.Y)

        section_students = tk.Listbox(
            section_frame,
            font=self.fonts["text"],
            selectbackground=self.colors["primary"],
            selectforeground="white",
            yscrollcommand=section_scroll.set
        )
        section_students.pack(fill=tk.BOTH, expand=True, pady=5)
        section_scroll.config(command=section_students.yview)

        # القائمة الوسطى للأزرار
        middle_frame = tk.Frame(lists_frame, bg=self.colors["light"], width=100)
        middle_frame.pack(side=tk.LEFT, fill=tk.Y, padx=5)

        move_to_other_btn = tk.Button(
            middle_frame,
            text=">>",
            font=self.fonts["text_bold"],
            bg=self.colors["primary"],
            fg="white",
            padx=5, pady=2,
            bd=0, relief=tk.FLAT,
            cursor="hand2",
            command=lambda: move_to_other_section()
        )
        move_to_other_btn.pack(pady=5)

        move_to_current_btn = tk.Button(
            middle_frame,
            text="<<",
            font=self.fonts["text_bold"],
            bg=self.colors["success"],
            fg="white",
            padx=5, pady=2,
            bd=0, relief=tk.FLAT,
            cursor="hand2",
            command=lambda: move_to_current_section()
        )
        move_to_current_btn.pack(pady=5)

        # قائمة المتدربين في الدورة بدون فصل أو في فصول أخرى
        other_frame = tk.LabelFrame(
            lists_frame,
            text="متدربين الدورة الآخرين",
            font=self.fonts["text_bold"],
            bg=self.colors["light"],
            fg=self.colors["dark"],
            padx=5, pady=5
        )
        other_frame.pack(side=tk.RIGHT, fill=tk.BOTH, expand=True, padx=(5, 0))

        other_scroll = tk.Scrollbar(other_frame)
        other_scroll.pack(side=tk.RIGHT, fill=tk.Y)

        other_students = tk.Listbox(
            other_frame,
            font=self.fonts["text"],
            selectbackground=self.colors["warning"],
            selectforeground="white",
            yscrollcommand=other_scroll.set
        )
        other_students.pack(fill=tk.BOTH, expand=True, pady=5)
        other_scroll.config(command=other_students.yview)

        # إطار المعلومات
        info_frame = tk.Frame(students_window, bg=self.colors["light"], padx=10, pady=5)
        info_frame.pack(fill=tk.X)

        section_count_var = tk.StringVar(value="عدد متدربين الفصل: 0")
        other_count_var = tk.StringVar(value="عدد المتدربين الآخرين: 0")

        section_count_label = tk.Label(
            info_frame,
            textvariable=section_count_var,
            font=self.fonts["text"],
            bg=self.colors["light"]
        )
        section_count_label.pack(side=tk.RIGHT, padx=10)

        other_count_label = tk.Label(
            info_frame,
            textvariable=other_count_var,
            font=self.fonts["text"],
            bg=self.colors["light"]
        )
        other_count_label.pack(side=tk.LEFT, padx=10)

        # إطار الأزرار السفلي
        button_frame = tk.Frame(students_window, bg=self.colors["light"], pady=10)
        button_frame.pack(fill=tk.X, padx=10)

        save_btn = tk.Button(
            button_frame,
            text="حفظ التغييرات",
            font=self.fonts["text_bold"],
            bg=self.colors["success"],
            fg="white",
            padx=15, pady=5,
            bd=0, relief=tk.FLAT,
            cursor="hand2",
            command=lambda: save_changes()
        )
        save_btn.pack(side=tk.LEFT, padx=5)

        close_btn = tk.Button(
            button_frame,
            text="إغلاق",
            font=self.fonts["text_bold"],
            bg=self.colors["dark"],
            fg="white",
            padx=15, pady=5,
            bd=0, relief=tk.FLAT,
            cursor="hand2",
            command=students_window.destroy
        )
        close_btn.pack(side=tk.RIGHT, padx=5)

        # حفظ التغييرات المؤقتة
        # القواميس تخزن: {الهوية: الاسم}
        current_section_students = {}  # المتدربين في الفصل الحالي
        other_section_students = {}  # المتدربين الآخرين
        modified = False  # هل تم تعديل البيانات

        # الوظائف المساعدة
        def load_students():
            """تحميل بيانات المتدربين"""
            nonlocal current_section_students, other_section_students

            # مسح القوائم
            section_students.delete(0, tk.END)
            other_students.delete(0, tk.END)
            current_section_students.clear()
            other_section_students.clear()

            cursor = self.conn.cursor()

            # 1. الحصول على متدربين الفصل الحالي
            cursor.execute("""
                SELECT t.national_id, t.name
                FROM trainees t
                JOIN student_sections s ON t.national_id = s.national_id
                WHERE t.course=? AND s.section_name=? AND t.is_excluded=0
                ORDER BY t.name
            """, (course_name, section_name))

            for row in cursor.fetchall():
                student_id, student_name = row
                display_text = f"{student_name} ({student_id})"
                section_students.insert(tk.END, display_text)
                current_section_students[student_id] = student_name

            # 2. الحصول على باقي متدربين الدورة (غير مسجلين في فصول أو في فصول أخرى)
            cursor.execute("""
                SELECT t.national_id, t.name, 
                       (SELECT section_name FROM student_sections 
                        WHERE national_id=t.national_id AND course_name=t.course) as section
                FROM trainees t
                WHERE t.course=? AND t.is_excluded=0
                ORDER BY t.name
            """, (course_name,))

            for row in cursor.fetchall():
                student_id, student_name, student_section = row

                # تخطي المتدربين في الفصل الحالي
                if student_section == section_name:
                    continue

                # إضافة المتدربين الآخرين
                display_text = f"{student_name} ({student_id})"
                if student_section:
                    display_text += f" - فصل: {student_section}"
                else:
                    display_text += " - بدون فصل"

                other_students.insert(tk.END, display_text)
                other_section_students[student_id] = student_name

            # تحديث العدادات
            section_count_var.set(f"عدد متدربين الفصل: {len(current_section_students)}")
            other_count_var.set(f"عدد المتدربين الآخرين: {len(other_section_students)}")

        def search_students():
            """البحث عن متدربين"""
            search_text = search_var.get().strip()
            if not search_text:
                load_students()
                return

            # مسح القوائم
            section_students.delete(0, tk.END)
            other_students.delete(0, tk.END)

            # البحث في قائمة متدربين الفصل الحالي
            for student_id, student_name in current_section_students.items():
                if (search_text.lower() in student_name.lower() or
                        search_text in student_id):
                    display_text = f"{student_name} ({student_id})"
                    section_students.insert(tk.END, display_text)

            # البحث في قائمة المتدربين الآخرين
            for student_id, student_name in other_section_students.items():
                if (search_text.lower() in student_name.lower() or
                        search_text in student_id):
                    display_text = f"{student_name} ({student_id})"

                    # التحقق من وجود معلومات الفصل
                    cursor = self.conn.cursor()
                    cursor.execute("""
                        SELECT section_name FROM student_sections
                        WHERE national_id=? AND course_name=?
                    """, (student_id, course_name))

                    result = cursor.fetchone()

                    if result and result[0]:
                        display_text += f" - فصل: {result[0]}"
                    else:
                        display_text += " - بدون فصل"

                    other_students.insert(tk.END, display_text)

        def move_to_other_section():
            """نقل المتدربين المحددين من الفصل الحالي إلى قائمة المتدربين الآخرين"""
            nonlocal modified

            selected_indices = section_students.curselection()
            if not selected_indices:
                return

            for index in reversed(selected_indices):
                student_text = section_students.get(index)
                student_id = extract_id_from_text(student_text)

                if student_id in current_section_students:
                    student_name = current_section_students[student_id]

                    # نقل المتدرب إلى القائمة الأخرى
                    other_students.insert(tk.END, f"{student_name} ({student_id}) - بدون فصل")
                    other_section_students[student_id] = student_name

                    # حذف المتدرب من القائمة الحالية
                    del current_section_students[student_id]
                    section_students.delete(index)

                    modified = True

            # تحديث العدادات
            section_count_var.set(f"عدد متدربين الفصل: {len(current_section_students)}")
            other_count_var.set(f"عدد المتدربين الآخرين: {len(other_section_students)}")

        def move_to_current_section():
            """نقل المتدربين المحددين من قائمة المتدربين الآخرين إلى الفصل الحالي"""
            nonlocal modified

            selected_indices = other_students.curselection()
            if not selected_indices:
                return

            for index in reversed(selected_indices):
                student_text = other_students.get(index)
                student_id = extract_id_from_text(student_text)

                if student_id in other_section_students:
                    student_name = other_section_students[student_id]

                    # نقل المتدرب إلى الفصل الحالي
                    section_students.insert(tk.END, f"{student_name} ({student_id})")
                    current_section_students[student_id] = student_name

                    # حذف المتدرب من القائمة الأخرى
                    del other_section_students[student_id]
                    other_students.delete(index)

                    modified = True

            # تحديث العدادات
            section_count_var.set(f"عدد متدربين الفصل: {len(current_section_students)}")
            other_count_var.set(f"عدد المتدربين الآخرين: {len(other_section_students)}")

        def extract_id_from_text(text):
            """استخراج رقم الهوية من النص المعروض"""
            # النص بشكل: "اسم المتدرب (رقم الهوية) - معلومات إضافية"
            try:
                start = text.find("(") + 1
                end = text.find(")")
                if start > 0 and end > start:
                    return text[start:end]
            except:
                pass
            return ""

        def save_changes():
            """حفظ التغييرات في قاعدة البيانات"""
            nonlocal modified

            if not modified:
                messagebox.showinfo("معلومات", "لم يتم إجراء أي تغييرات")
                return

            # تحديث بيانات المتدربين في قاعدة البيانات
            current_date = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")

            try:
                cursor = self.conn.cursor()
                with self.conn:
                    # 1. حذف كل المتدربين من الفصل الحالي
                    self.conn.execute("""
                        DELETE FROM student_sections
                        WHERE course_name=? AND section_name=?
                    """, (course_name, section_name))

                    # 2. إضافة المتدربين الحاليين في الفصل
                    for student_id in current_section_students:
                        self.conn.execute("""
                            INSERT OR REPLACE INTO student_sections
                            (national_id, course_name, section_name, assigned_date)
                            VALUES (?, ?, ?, ?)
                        """, (student_id, course_name, section_name, current_date))

                messagebox.showinfo("نجاح", "تم حفظ التغييرات بنجاح")
                modified = False
            except Exception as e:
                messagebox.showerror("خطأ", f"حدث خطأ أثناء حفظ التغييرات: {str(e)}")

        # تحميل بيانات المتدربين عند فتح النافذة
        load_students()
